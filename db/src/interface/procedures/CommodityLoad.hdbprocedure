PROCEDURE "sap.fsdm.procedures::CommodityLoad" (IN ROW "sap.fsdm.tabletypes::CommodityTT")
  LANGUAGE SQLSCRIPT
  SQL SECURITY DEFINER
  AS
BEGIN

    --Check for period overlap
    declare period_overlap condition for sql_error_code 10001;
    declare exit handler for period_overlap
        begin
            declare err_msg clob;
            select TOP 1
                'Business Period Overlap: Key ' ||
                'CommodityID=' || TO_VARCHAR("CommodityID") || ' ' ||
                ':Business Period Overlap Error'
            into err_msg
            from
            (
                select
                    "IN"."BusinessValidFrom" as "X",
                    "IN"."BusinessValidTo" as "Y",
                    lag ( "IN"."BusinessValidFrom", 1)
                    over ( partition by
                        "IN"."CommodityID"
                    order by "IN"."BusinessValidFrom") as "NX_",
                    lag("IN"."BusinessValidTo", 1)
                    over ( partition by
                        "IN"."CommodityID"
                    order by "IN"."BusinessValidFrom") as "NY_",
                        "CommodityID"
                from :row as "IN"
            )
            where ("X" >= "NX_" and "X" < "NY_") or ("Y" > "NX_" and "Y" <= "NY_");
            resignal set message_text = :err_msg;
        end;

    var_overlap = select *
                    from
                    (
                        select
                            "IN"."BusinessValidFrom" as "X",
                            "IN"."BusinessValidTo" as "Y",
                            lag ( "IN"."BusinessValidFrom", 1)
                            over ( partition by
                                    "IN"."CommodityID"
                            order by "IN"."BusinessValidFrom") as "NX_",
                            lag ( "IN"."BusinessValidTo", 1)
                            over ( partition by
                                    "IN"."CommodityID"
                            order by "IN"."BusinessValidFrom") as "NY_"
                from :row as "IN"
                )
                where ("X" >= "NX_" and "X" < "NY_") or ("Y" > "NX_" and "Y" <= "NY_");

    if not is_empty(:var_overlap) then
      signal period_overlap;
    end if;

    :var_overlap.delete();

    --Insert chunked versions of object
    insert into "sap.fsdm::Commodity" (
        "CommodityID",
        "BusinessValidFrom",
        "BusinessValidTo",
        "BaseCommodityName",
        "Brand",
        "CalorificValue",
        "CoalComposition",
        "CoalProperties",
        "CoalType",
        "CommodityCategory",
        "CommodityDescription",
        "CommodityName",
        "EnergyCommodityCategory",
        "GasType",
        "Grade",
        "OilType",
        "Shape",
        "Voltage",
        "SourceSystemID",
        "ChangeTimestampInSourceSystem",
        "ChangingUserInSourceSystem",
        "ChangingProcessType",
        "ChangingProcessID"
    )
    (
        select
            "OLD_CommodityID" as "CommodityID" ,
            "NX_" as "BusinessValidFrom" ,
            "BusinessValidFrom" as "BusinessValidTo" ,
            "OLD_BaseCommodityName" as "BaseCommodityName" ,
            "OLD_Brand" as "Brand" ,
            "OLD_CalorificValue" as "CalorificValue" ,
            "OLD_CoalComposition" as "CoalComposition" ,
            "OLD_CoalProperties" as "CoalProperties" ,
            "OLD_CoalType" as "CoalType" ,
            "OLD_CommodityCategory" as "CommodityCategory" ,
            "OLD_CommodityDescription" as "CommodityDescription" ,
            "OLD_CommodityName" as "CommodityName" ,
            "OLD_EnergyCommodityCategory" as "EnergyCommodityCategory" ,
            "OLD_GasType" as "GasType" ,
            "OLD_Grade" as "Grade" ,
            "OLD_OilType" as "OilType" ,
            "OLD_Shape" as "Shape" ,
            "OLD_Voltage" as "Voltage" ,
            "OLD_SourceSystemID" as "SourceSystemID" ,
            "OLD_ChangeTimestampInSourceSystem" as "ChangeTimestampInSourceSystem" ,
            "OLD_ChangingUserInSourceSystem" as "ChangingUserInSourceSystem" ,
            "OLD_ChangingProcessType" as "ChangingProcessType" ,
            "OLD_ChangingProcessID" as "ChangingProcessID" 
        from
        (
            select
                lag("IN"."BusinessValidTo", 1, "OLD"."BusinessValidFrom")
                over ( partition by
                        "IN"."CommodityID",
                        "OLD"."BusinessValidFrom"
                       order by "IN"."BusinessValidFrom") as "NX_",
                "IN"."BusinessValidFrom",
                                "OLD"."CommodityID" as "OLD_CommodityID",
                                "OLD"."BusinessValidFrom" as "OLD_BusinessValidFrom",
                                "OLD"."BusinessValidTo" as "OLD_BusinessValidTo",
                "OLD"."SystemValidFrom" as "OLD_SystemValidFrom",
                "OLD"."SystemValidTo" as "OLD_SystemValidTo",
                                "OLD"."BaseCommodityName" as "OLD_BaseCommodityName",
                                "OLD"."Brand" as "OLD_Brand",
                                "OLD"."CalorificValue" as "OLD_CalorificValue",
                                "OLD"."CoalComposition" as "OLD_CoalComposition",
                                "OLD"."CoalProperties" as "OLD_CoalProperties",
                                "OLD"."CoalType" as "OLD_CoalType",
                                "OLD"."CommodityCategory" as "OLD_CommodityCategory",
                                "OLD"."CommodityDescription" as "OLD_CommodityDescription",
                                "OLD"."CommodityName" as "OLD_CommodityName",
                                "OLD"."EnergyCommodityCategory" as "OLD_EnergyCommodityCategory",
                                "OLD"."GasType" as "OLD_GasType",
                                "OLD"."Grade" as "OLD_Grade",
                                "OLD"."OilType" as "OLD_OilType",
                                "OLD"."Shape" as "OLD_Shape",
                                "OLD"."Voltage" as "OLD_Voltage",
                                "OLD"."SourceSystemID" as "OLD_SourceSystemID",
                                "OLD"."ChangeTimestampInSourceSystem" as "OLD_ChangeTimestampInSourceSystem",
                                "OLD"."ChangingUserInSourceSystem" as "OLD_ChangingUserInSourceSystem",
                                "OLD"."ChangingProcessType" as "OLD_ChangingProcessType",
                                "OLD"."ChangingProcessID" as "OLD_ChangingProcessID"
            from :row as "IN"
            inner join "sap.fsdm::Commodity" as "OLD"
            on
                ( case when "IN"."CommodityID" is null then '' else "IN"."CommodityID" end ) = "OLD"."CommodityID" 
            where
                         ( "IN"."BusinessValidFrom" < "OLD"."BusinessValidTo" and "IN"."BusinessValidTo" > "OLD"."BusinessValidFrom" ) or
                         ( "IN"."BusinessValidFrom" = "OLD"."BusinessValidFrom" and "IN"."BusinessValidTo" = "OLD"."BusinessValidTo" ))
        where "BusinessValidFrom" > "NX_" );

    --Insert rightmost chunk
    insert into "sap.fsdm::Commodity" (
        "CommodityID",
        "BusinessValidFrom",
        "BusinessValidTo",
        "BaseCommodityName",
        "Brand",
        "CalorificValue",
        "CoalComposition",
        "CoalProperties",
        "CoalType",
        "CommodityCategory",
        "CommodityDescription",
        "CommodityName",
        "EnergyCommodityCategory",
        "GasType",
        "Grade",
        "OilType",
        "Shape",
        "Voltage",
        "SourceSystemID",
        "ChangeTimestampInSourceSystem",
        "ChangingUserInSourceSystem",
        "ChangingProcessType",
        "ChangingProcessID"
    )
    (
        select
            "OLD_CommodityID" as "CommodityID",
            "BusinessValidTo" as "BusinessValidFrom",
            "OLD_BusinessValidTo" as "BusinessValidTo",
            "OLD_BaseCommodityName" as "BaseCommodityName",
            "OLD_Brand" as "Brand",
            "OLD_CalorificValue" as "CalorificValue",
            "OLD_CoalComposition" as "CoalComposition",
            "OLD_CoalProperties" as "CoalProperties",
            "OLD_CoalType" as "CoalType",
            "OLD_CommodityCategory" as "CommodityCategory",
            "OLD_CommodityDescription" as "CommodityDescription",
            "OLD_CommodityName" as "CommodityName",
            "OLD_EnergyCommodityCategory" as "EnergyCommodityCategory",
            "OLD_GasType" as "GasType",
            "OLD_Grade" as "Grade",
            "OLD_OilType" as "OilType",
            "OLD_Shape" as "Shape",
            "OLD_Voltage" as "Voltage",
            "OLD_SourceSystemID" as "SourceSystemID",
            "OLD_ChangeTimestampInSourceSystem" as "ChangeTimestampInSourceSystem",
            "OLD_ChangingUserInSourceSystem" as "ChangingUserInSourceSystem",
            "OLD_ChangingProcessType" as "ChangingProcessType",
            "OLD_ChangingProcessID" as "ChangingProcessID"
        from
        (
            select
                lead("IN"."BusinessValidFrom", 1, "OLD"."BusinessValidTo")
                over ( partition by
                        "IN"."CommodityID",
                        "OLD"."BusinessValidFrom"
                order by "IN"."BusinessValidFrom") AS "NY_",
                "IN"."BusinessValidTo",
                        "OLD"."CommodityID" as "OLD_CommodityID",
                        "OLD"."BusinessValidFrom" as "OLD_BusinessValidFrom",
                        "OLD"."BusinessValidTo" as "OLD_BusinessValidTo",
            "OLD"."SystemValidFrom" as "OLD_SystemValidFrom",
            "OLD"."SystemValidTo" as "OLD_SystemValidTo",
                        "OLD"."BaseCommodityName" as "OLD_BaseCommodityName",
                        "OLD"."Brand" as "OLD_Brand",
                        "OLD"."CalorificValue" as "OLD_CalorificValue",
                        "OLD"."CoalComposition" as "OLD_CoalComposition",
                        "OLD"."CoalProperties" as "OLD_CoalProperties",
                        "OLD"."CoalType" as "OLD_CoalType",
                        "OLD"."CommodityCategory" as "OLD_CommodityCategory",
                        "OLD"."CommodityDescription" as "OLD_CommodityDescription",
                        "OLD"."CommodityName" as "OLD_CommodityName",
                        "OLD"."EnergyCommodityCategory" as "OLD_EnergyCommodityCategory",
                        "OLD"."GasType" as "OLD_GasType",
                        "OLD"."Grade" as "OLD_Grade",
                        "OLD"."OilType" as "OLD_OilType",
                        "OLD"."Shape" as "OLD_Shape",
                        "OLD"."Voltage" as "OLD_Voltage",
                        "OLD"."SourceSystemID" as "OLD_SourceSystemID",
                        "OLD"."ChangeTimestampInSourceSystem" as "OLD_ChangeTimestampInSourceSystem",
                        "OLD"."ChangingUserInSourceSystem" as "OLD_ChangingUserInSourceSystem",
                        "OLD"."ChangingProcessType" as "OLD_ChangingProcessType",
                        "OLD"."ChangingProcessID" as "OLD_ChangingProcessID"
            from :row as "IN"
            inner join "sap.fsdm::Commodity" as "OLD"
            on
                ( case when "IN"."CommodityID" is null then '' else "IN"."CommodityID" end ) = "OLD"."CommodityID" 
            where
                         ( "IN"."BusinessValidFrom" < "OLD"."BusinessValidTo" and "IN"."BusinessValidTo" > "OLD"."BusinessValidFrom" ) or
                         ( "IN"."BusinessValidFrom" = "OLD"."BusinessValidFrom" and "IN"."BusinessValidTo" = "OLD"."BusinessValidTo" ))
        where "NY_" = "OLD_BusinessValidTo" and "OLD_BusinessValidTo" > "BusinessValidTo");

    delete from "sap.fsdm::Commodity"
    where (
        "CommodityID",
        "BusinessValidFrom",
        "BusinessValidTo"
    )
    in
    (
        select
            "OLD"."CommodityID",
            "OLD"."BusinessValidFrom",
            "OLD"."BusinessValidTo"
        from :row as "IN"
        inner join "sap.fsdm::Commodity" as "OLD"
        on
           ( case when "IN"."CommodityID" is null then '' else "IN"."CommodityID" end ) = "OLD"."CommodityID" 
        where
           ( "IN"."BusinessValidFrom" < "OLD"."BusinessValidTo" and "IN"."BusinessValidTo" > "OLD"."BusinessValidFrom" ) or
           ( "IN"."BusinessValidFrom" = "OLD"."BusinessValidFrom" and "IN"."BusinessValidTo" = "OLD"."BusinessValidTo" ));

    --Insert ALL the input data 
    insert into "sap.fsdm::Commodity" (
        "CommodityID",
        "BusinessValidFrom",
        "BusinessValidTo",
        "BaseCommodityName",
        "Brand",
        "CalorificValue",
        "CoalComposition",
        "CoalProperties",
        "CoalType",
        "CommodityCategory",
        "CommodityDescription",
        "CommodityName",
        "EnergyCommodityCategory",
        "GasType",
        "Grade",
        "OilType",
        "Shape",
        "Voltage",
        "SourceSystemID",
        "ChangeTimestampInSourceSystem",
        "ChangingUserInSourceSystem",
        "ChangingProcessType",
        "ChangingProcessID"
)    (
        select
            ( case when "CommodityID" is null then '' else "CommodityID" end ) as "CommodityID",
            "BusinessValidFrom"  ,
            "BusinessValidTo"  ,
            "BaseCommodityName"  ,
            "Brand"  ,
            "CalorificValue"  ,
            "CoalComposition"  ,
            "CoalProperties"  ,
            "CoalType"  ,
            "CommodityCategory"  ,
            "CommodityDescription"  ,
            "CommodityName"  ,
            "EnergyCommodityCategory"  ,
            "GasType"  ,
            "Grade"  ,
            "OilType"  ,
            "Shape"  ,
            "Voltage"  ,
            "SourceSystemID"  ,
            "ChangeTimestampInSourceSystem"  ,
            "ChangingUserInSourceSystem"  ,
            "ChangingProcessType"  ,
            "ChangingProcessID"  
        from :row );

END