PROCEDURE "sap.fsdm.procedures::IndexLoad" (IN ROW "sap.fsdm.tabletypes::IndexTT")
  LANGUAGE SQLSCRIPT
  SQL SECURITY DEFINER
  AS
BEGIN

    --Check for period overlap
    declare period_overlap condition for sql_error_code 10001;
    declare exit handler for period_overlap
        begin
            declare err_msg clob;
            select TOP 1
                'Business Period Overlap: Key ' ||
                'IndexID=' || TO_VARCHAR("IndexID") || ' ' ||
                ':Business Period Overlap Error'
            into err_msg
            from
            (
                select
                    "IN"."BusinessValidFrom" as "X",
                    "IN"."BusinessValidTo" as "Y",
                    lag ( "IN"."BusinessValidFrom", 1)
                    over ( partition by
                        "IN"."IndexID"
                    order by "IN"."BusinessValidFrom") as "NX_",
                    lag("IN"."BusinessValidTo", 1)
                    over ( partition by
                        "IN"."IndexID"
                    order by "IN"."BusinessValidFrom") as "NY_",
                        "IndexID"
                from :row as "IN"
            )
            where ("X" >= "NX_" and "X" < "NY_") or ("Y" > "NX_" and "Y" <= "NY_");
            resignal set message_text = :err_msg;
        end;

    var_overlap = select *
                    from
                    (
                        select
                            "IN"."BusinessValidFrom" as "X",
                            "IN"."BusinessValidTo" as "Y",
                            lag ( "IN"."BusinessValidFrom", 1)
                            over ( partition by
                                    "IN"."IndexID"
                            order by "IN"."BusinessValidFrom") as "NX_",
                            lag ( "IN"."BusinessValidTo", 1)
                            over ( partition by
                                    "IN"."IndexID"
                            order by "IN"."BusinessValidFrom") as "NY_"
                from :row as "IN"
                )
                where ("X" >= "NX_" and "X" < "NY_") or ("Y" > "NX_" and "Y" <= "NY_");

    if not is_empty(:var_overlap) then
      signal period_overlap;
    end if;

    :var_overlap.delete();

    --Insert chunked versions of object
    insert into "sap.fsdm::Index" (
        "IndexID",
        "BusinessValidFrom",
        "BusinessValidTo",
        "IndexAnnexDate",
        "IndexAnnexSource",
        "IndexAnnexVersion",
        "IndexCategory",
        "IndexDescription",
        "IndexName",
        "IndexPublisher",
        "IndexREDCode",
        "IndexSeries",
        "IndexType",
        "IsIndexSeriesOnTheRun",
        "MainIndexAsPerCRR",
        "SourceSystemID",
        "ChangeTimestampInSourceSystem",
        "ChangingUserInSourceSystem",
        "ChangingProcessType",
        "ChangingProcessID"
    )
    (
        select
            "OLD_IndexID" as "IndexID" ,
            "NX_" as "BusinessValidFrom" ,
            "BusinessValidFrom" as "BusinessValidTo" ,
            "OLD_IndexAnnexDate" as "IndexAnnexDate" ,
            "OLD_IndexAnnexSource" as "IndexAnnexSource" ,
            "OLD_IndexAnnexVersion" as "IndexAnnexVersion" ,
            "OLD_IndexCategory" as "IndexCategory" ,
            "OLD_IndexDescription" as "IndexDescription" ,
            "OLD_IndexName" as "IndexName" ,
            "OLD_IndexPublisher" as "IndexPublisher" ,
            "OLD_IndexREDCode" as "IndexREDCode" ,
            "OLD_IndexSeries" as "IndexSeries" ,
            "OLD_IndexType" as "IndexType" ,
            "OLD_IsIndexSeriesOnTheRun" as "IsIndexSeriesOnTheRun" ,
            "OLD_MainIndexAsPerCRR" as "MainIndexAsPerCRR" ,
            "OLD_SourceSystemID" as "SourceSystemID" ,
            "OLD_ChangeTimestampInSourceSystem" as "ChangeTimestampInSourceSystem" ,
            "OLD_ChangingUserInSourceSystem" as "ChangingUserInSourceSystem" ,
            "OLD_ChangingProcessType" as "ChangingProcessType" ,
            "OLD_ChangingProcessID" as "ChangingProcessID" 
        from
        (
            select
                lag("IN"."BusinessValidTo", 1, "OLD"."BusinessValidFrom")
                over ( partition by
                        "IN"."IndexID",
                        "OLD"."BusinessValidFrom"
                       order by "IN"."BusinessValidFrom") as "NX_",
                "IN"."BusinessValidFrom",
                                "OLD"."IndexID" as "OLD_IndexID",
                                "OLD"."BusinessValidFrom" as "OLD_BusinessValidFrom",
                                "OLD"."BusinessValidTo" as "OLD_BusinessValidTo",
                "OLD"."SystemValidFrom" as "OLD_SystemValidFrom",
                "OLD"."SystemValidTo" as "OLD_SystemValidTo",
                                "OLD"."IndexAnnexDate" as "OLD_IndexAnnexDate",
                                "OLD"."IndexAnnexSource" as "OLD_IndexAnnexSource",
                                "OLD"."IndexAnnexVersion" as "OLD_IndexAnnexVersion",
                                "OLD"."IndexCategory" as "OLD_IndexCategory",
                                "OLD"."IndexDescription" as "OLD_IndexDescription",
                                "OLD"."IndexName" as "OLD_IndexName",
                                "OLD"."IndexPublisher" as "OLD_IndexPublisher",
                                "OLD"."IndexREDCode" as "OLD_IndexREDCode",
                                "OLD"."IndexSeries" as "OLD_IndexSeries",
                                "OLD"."IndexType" as "OLD_IndexType",
                                "OLD"."IsIndexSeriesOnTheRun" as "OLD_IsIndexSeriesOnTheRun",
                                "OLD"."MainIndexAsPerCRR" as "OLD_MainIndexAsPerCRR",
                                "OLD"."SourceSystemID" as "OLD_SourceSystemID",
                                "OLD"."ChangeTimestampInSourceSystem" as "OLD_ChangeTimestampInSourceSystem",
                                "OLD"."ChangingUserInSourceSystem" as "OLD_ChangingUserInSourceSystem",
                                "OLD"."ChangingProcessType" as "OLD_ChangingProcessType",
                                "OLD"."ChangingProcessID" as "OLD_ChangingProcessID"
            from :row as "IN"
            inner join "sap.fsdm::Index" as "OLD"
            on
                ( case when "IN"."IndexID" is null then '' else "IN"."IndexID" end ) = "OLD"."IndexID" 
            where
                         ( "IN"."BusinessValidFrom" < "OLD"."BusinessValidTo" and "IN"."BusinessValidTo" > "OLD"."BusinessValidFrom" ) or
                         ( "IN"."BusinessValidFrom" = "OLD"."BusinessValidFrom" and "IN"."BusinessValidTo" = "OLD"."BusinessValidTo" ))
        where "BusinessValidFrom" > "NX_" );

    --Insert rightmost chunk
    insert into "sap.fsdm::Index" (
        "IndexID",
        "BusinessValidFrom",
        "BusinessValidTo",
        "IndexAnnexDate",
        "IndexAnnexSource",
        "IndexAnnexVersion",
        "IndexCategory",
        "IndexDescription",
        "IndexName",
        "IndexPublisher",
        "IndexREDCode",
        "IndexSeries",
        "IndexType",
        "IsIndexSeriesOnTheRun",
        "MainIndexAsPerCRR",
        "SourceSystemID",
        "ChangeTimestampInSourceSystem",
        "ChangingUserInSourceSystem",
        "ChangingProcessType",
        "ChangingProcessID"
    )
    (
        select
            "OLD_IndexID" as "IndexID",
            "BusinessValidTo" as "BusinessValidFrom",
            "OLD_BusinessValidTo" as "BusinessValidTo",
            "OLD_IndexAnnexDate" as "IndexAnnexDate",
            "OLD_IndexAnnexSource" as "IndexAnnexSource",
            "OLD_IndexAnnexVersion" as "IndexAnnexVersion",
            "OLD_IndexCategory" as "IndexCategory",
            "OLD_IndexDescription" as "IndexDescription",
            "OLD_IndexName" as "IndexName",
            "OLD_IndexPublisher" as "IndexPublisher",
            "OLD_IndexREDCode" as "IndexREDCode",
            "OLD_IndexSeries" as "IndexSeries",
            "OLD_IndexType" as "IndexType",
            "OLD_IsIndexSeriesOnTheRun" as "IsIndexSeriesOnTheRun",
            "OLD_MainIndexAsPerCRR" as "MainIndexAsPerCRR",
            "OLD_SourceSystemID" as "SourceSystemID",
            "OLD_ChangeTimestampInSourceSystem" as "ChangeTimestampInSourceSystem",
            "OLD_ChangingUserInSourceSystem" as "ChangingUserInSourceSystem",
            "OLD_ChangingProcessType" as "ChangingProcessType",
            "OLD_ChangingProcessID" as "ChangingProcessID"
        from
        (
            select
                lead("IN"."BusinessValidFrom", 1, "OLD"."BusinessValidTo")
                over ( partition by
                        "IN"."IndexID",
                        "OLD"."BusinessValidFrom"
                order by "IN"."BusinessValidFrom") AS "NY_",
                "IN"."BusinessValidTo",
                        "OLD"."IndexID" as "OLD_IndexID",
                        "OLD"."BusinessValidFrom" as "OLD_BusinessValidFrom",
                        "OLD"."BusinessValidTo" as "OLD_BusinessValidTo",
            "OLD"."SystemValidFrom" as "OLD_SystemValidFrom",
            "OLD"."SystemValidTo" as "OLD_SystemValidTo",
                        "OLD"."IndexAnnexDate" as "OLD_IndexAnnexDate",
                        "OLD"."IndexAnnexSource" as "OLD_IndexAnnexSource",
                        "OLD"."IndexAnnexVersion" as "OLD_IndexAnnexVersion",
                        "OLD"."IndexCategory" as "OLD_IndexCategory",
                        "OLD"."IndexDescription" as "OLD_IndexDescription",
                        "OLD"."IndexName" as "OLD_IndexName",
                        "OLD"."IndexPublisher" as "OLD_IndexPublisher",
                        "OLD"."IndexREDCode" as "OLD_IndexREDCode",
                        "OLD"."IndexSeries" as "OLD_IndexSeries",
                        "OLD"."IndexType" as "OLD_IndexType",
                        "OLD"."IsIndexSeriesOnTheRun" as "OLD_IsIndexSeriesOnTheRun",
                        "OLD"."MainIndexAsPerCRR" as "OLD_MainIndexAsPerCRR",
                        "OLD"."SourceSystemID" as "OLD_SourceSystemID",
                        "OLD"."ChangeTimestampInSourceSystem" as "OLD_ChangeTimestampInSourceSystem",
                        "OLD"."ChangingUserInSourceSystem" as "OLD_ChangingUserInSourceSystem",
                        "OLD"."ChangingProcessType" as "OLD_ChangingProcessType",
                        "OLD"."ChangingProcessID" as "OLD_ChangingProcessID"
            from :row as "IN"
            inner join "sap.fsdm::Index" as "OLD"
            on
                ( case when "IN"."IndexID" is null then '' else "IN"."IndexID" end ) = "OLD"."IndexID" 
            where
                         ( "IN"."BusinessValidFrom" < "OLD"."BusinessValidTo" and "IN"."BusinessValidTo" > "OLD"."BusinessValidFrom" ) or
                         ( "IN"."BusinessValidFrom" = "OLD"."BusinessValidFrom" and "IN"."BusinessValidTo" = "OLD"."BusinessValidTo" ))
        where "NY_" = "OLD_BusinessValidTo" and "OLD_BusinessValidTo" > "BusinessValidTo");

    delete from "sap.fsdm::Index"
    where (
        "IndexID",
        "BusinessValidFrom",
        "BusinessValidTo"
    )
    in
    (
        select
            "OLD"."IndexID",
            "OLD"."BusinessValidFrom",
            "OLD"."BusinessValidTo"
        from :row as "IN"
        inner join "sap.fsdm::Index" as "OLD"
        on
           ( case when "IN"."IndexID" is null then '' else "IN"."IndexID" end ) = "OLD"."IndexID" 
        where
           ( "IN"."BusinessValidFrom" < "OLD"."BusinessValidTo" and "IN"."BusinessValidTo" > "OLD"."BusinessValidFrom" ) or
           ( "IN"."BusinessValidFrom" = "OLD"."BusinessValidFrom" and "IN"."BusinessValidTo" = "OLD"."BusinessValidTo" ));

    --Insert ALL the input data 
    insert into "sap.fsdm::Index" (
        "IndexID",
        "BusinessValidFrom",
        "BusinessValidTo",
        "IndexAnnexDate",
        "IndexAnnexSource",
        "IndexAnnexVersion",
        "IndexCategory",
        "IndexDescription",
        "IndexName",
        "IndexPublisher",
        "IndexREDCode",
        "IndexSeries",
        "IndexType",
        "IsIndexSeriesOnTheRun",
        "MainIndexAsPerCRR",
        "SourceSystemID",
        "ChangeTimestampInSourceSystem",
        "ChangingUserInSourceSystem",
        "ChangingProcessType",
        "ChangingProcessID"
)    (
        select
            ( case when "IndexID" is null then '' else "IndexID" end ) as "IndexID",
            "BusinessValidFrom"  ,
            "BusinessValidTo"  ,
            "IndexAnnexDate"  ,
            "IndexAnnexSource"  ,
            "IndexAnnexVersion"  ,
            "IndexCategory"  ,
            "IndexDescription"  ,
            "IndexName"  ,
            "IndexPublisher"  ,
            "IndexREDCode"  ,
            "IndexSeries"  ,
            "IndexType"  ,
            "IsIndexSeriesOnTheRun"  ,
            "MainIndexAsPerCRR"  ,
            "SourceSystemID"  ,
            "ChangeTimestampInSourceSystem"  ,
            "ChangingUserInSourceSystem"  ,
            "ChangingProcessType"  ,
            "ChangingProcessID"  
        from :row );

END