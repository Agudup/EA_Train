PROCEDURE "sap.fsdm.procedures::CommoditySwapCalculationPeriodLoad" (IN ROW "sap.fsdm.tabletypes::CommoditySwapCalculationPeriodTT")
  LANGUAGE SQLSCRIPT
  SQL SECURITY DEFINER
  AS
BEGIN

    --Check for period overlap
    declare period_overlap condition for sql_error_code 10001;
    declare exit handler for period_overlap
        begin
            declare err_msg clob;
            select TOP 1
                'Business Period Overlap: Key ' ||
                'IntervalEndDate=' || TO_VARCHAR("IntervalEndDate") || ' ' ||
                'IntervalStartDate=' || TO_VARCHAR("IntervalStartDate") || ' ' ||
                'RoleOfPayer=' || TO_VARCHAR("RoleOfPayer") || ' ' ||
                '_Swap.FinancialContractID=' || TO_VARCHAR("_Swap.FinancialContractID") || ' ' ||
                '_Swap.IDSystem=' || TO_VARCHAR("_Swap.IDSystem") || ' ' ||
                ':Business Period Overlap Error'
            into err_msg
            from
            (
                select
                    "IN"."BusinessValidFrom" as "X",
                    "IN"."BusinessValidTo" as "Y",
                    lag ( "IN"."BusinessValidFrom", 1)
                    over ( partition by
                        "IN"."IntervalEndDate",
                        "IN"."IntervalStartDate",
                        "IN"."RoleOfPayer",
                        "IN"."_Swap.FinancialContractID",
                        "IN"."_Swap.IDSystem"
                    order by "IN"."BusinessValidFrom") as "NX_",
                    lag("IN"."BusinessValidTo", 1)
                    over ( partition by
                        "IN"."IntervalEndDate",
                        "IN"."IntervalStartDate",
                        "IN"."RoleOfPayer",
                        "IN"."_Swap.FinancialContractID",
                        "IN"."_Swap.IDSystem"
                    order by "IN"."BusinessValidFrom") as "NY_",
                        "IntervalEndDate",
                        "IntervalStartDate",
                        "RoleOfPayer",
                        "_Swap.FinancialContractID",
                        "_Swap.IDSystem"
                from :row as "IN"
            )
            where ("X" >= "NX_" and "X" < "NY_") or ("Y" > "NX_" and "Y" <= "NY_");
            resignal set message_text = :err_msg;
        end;

    var_overlap = select *
                    from
                    (
                        select
                            "IN"."BusinessValidFrom" as "X",
                            "IN"."BusinessValidTo" as "Y",
                            lag ( "IN"."BusinessValidFrom", 1)
                            over ( partition by
                                    "IN"."IntervalEndDate",
                                    "IN"."IntervalStartDate",
                                    "IN"."RoleOfPayer",
                                    "IN"."_Swap.FinancialContractID",
                                    "IN"."_Swap.IDSystem"
                            order by "IN"."BusinessValidFrom") as "NX_",
                            lag ( "IN"."BusinessValidTo", 1)
                            over ( partition by
                                    "IN"."IntervalEndDate",
                                    "IN"."IntervalStartDate",
                                    "IN"."RoleOfPayer",
                                    "IN"."_Swap.FinancialContractID",
                                    "IN"."_Swap.IDSystem"
                            order by "IN"."BusinessValidFrom") as "NY_"
                from :row as "IN"
                )
                where ("X" >= "NX_" and "X" < "NY_") or ("Y" > "NX_" and "Y" <= "NY_");

    if not is_empty(:var_overlap) then
      signal period_overlap;
    end if;

    :var_overlap.delete();

    --Insert chunked versions of object
    insert into "sap.fsdm::CommoditySwapCalculationPeriod" (
        "IntervalEndDate",
        "IntervalStartDate",
        "RoleOfPayer",
        "_Swap.FinancialContractID",
        "_Swap.IDSystem",
        "BusinessValidFrom",
        "BusinessValidTo",
        "BusinessCalendar",
        "BusinessDayConvention",
        "DeliveryDate",
        "FixedPriceCurrency",
        "FixedPricePerUnit",
        "NotionalQuantity",
        "NotionalQuantityUnit",
        "PricingDate",
        "Spread",
        "SpreadAmount",
        "SpreadAmountCurrency",
        "SourceSystemID",
        "ChangeTimestampInSourceSystem",
        "ChangingUserInSourceSystem",
        "ChangingProcessType",
        "ChangingProcessID"
    )
    (
        select
            "OLD_IntervalEndDate" as "IntervalEndDate" ,
            "OLD_IntervalStartDate" as "IntervalStartDate" ,
            "OLD_RoleOfPayer" as "RoleOfPayer" ,
            "OLD__Swap.FinancialContractID" as "_Swap.FinancialContractID" ,
            "OLD__Swap.IDSystem" as "_Swap.IDSystem" ,
            "NX_" as "BusinessValidFrom" ,
            "BusinessValidFrom" as "BusinessValidTo" ,
            "OLD_BusinessCalendar" as "BusinessCalendar" ,
            "OLD_BusinessDayConvention" as "BusinessDayConvention" ,
            "OLD_DeliveryDate" as "DeliveryDate" ,
            "OLD_FixedPriceCurrency" as "FixedPriceCurrency" ,
            "OLD_FixedPricePerUnit" as "FixedPricePerUnit" ,
            "OLD_NotionalQuantity" as "NotionalQuantity" ,
            "OLD_NotionalQuantityUnit" as "NotionalQuantityUnit" ,
            "OLD_PricingDate" as "PricingDate" ,
            "OLD_Spread" as "Spread" ,
            "OLD_SpreadAmount" as "SpreadAmount" ,
            "OLD_SpreadAmountCurrency" as "SpreadAmountCurrency" ,
            "OLD_SourceSystemID" as "SourceSystemID" ,
            "OLD_ChangeTimestampInSourceSystem" as "ChangeTimestampInSourceSystem" ,
            "OLD_ChangingUserInSourceSystem" as "ChangingUserInSourceSystem" ,
            "OLD_ChangingProcessType" as "ChangingProcessType" ,
            "OLD_ChangingProcessID" as "ChangingProcessID" 
        from
        (
            select
                lag("IN"."BusinessValidTo", 1, "OLD"."BusinessValidFrom")
                over ( partition by
                        "IN"."IntervalEndDate",
                        "IN"."IntervalStartDate",
                        "IN"."RoleOfPayer",
                        "IN"."_Swap.FinancialContractID",
                        "IN"."_Swap.IDSystem",
                        "OLD"."BusinessValidFrom"
                       order by "IN"."BusinessValidFrom") as "NX_",
                "IN"."BusinessValidFrom",
                                "OLD"."IntervalEndDate" as "OLD_IntervalEndDate",
                                "OLD"."IntervalStartDate" as "OLD_IntervalStartDate",
                                "OLD"."RoleOfPayer" as "OLD_RoleOfPayer",
                                "OLD"."_Swap.FinancialContractID" as "OLD__Swap.FinancialContractID",
                                "OLD"."_Swap.IDSystem" as "OLD__Swap.IDSystem",
                                "OLD"."BusinessValidFrom" as "OLD_BusinessValidFrom",
                                "OLD"."BusinessValidTo" as "OLD_BusinessValidTo",
                "OLD"."SystemValidFrom" as "OLD_SystemValidFrom",
                "OLD"."SystemValidTo" as "OLD_SystemValidTo",
                                "OLD"."BusinessCalendar" as "OLD_BusinessCalendar",
                                "OLD"."BusinessDayConvention" as "OLD_BusinessDayConvention",
                                "OLD"."DeliveryDate" as "OLD_DeliveryDate",
                                "OLD"."FixedPriceCurrency" as "OLD_FixedPriceCurrency",
                                "OLD"."FixedPricePerUnit" as "OLD_FixedPricePerUnit",
                                "OLD"."NotionalQuantity" as "OLD_NotionalQuantity",
                                "OLD"."NotionalQuantityUnit" as "OLD_NotionalQuantityUnit",
                                "OLD"."PricingDate" as "OLD_PricingDate",
                                "OLD"."Spread" as "OLD_Spread",
                                "OLD"."SpreadAmount" as "OLD_SpreadAmount",
                                "OLD"."SpreadAmountCurrency" as "OLD_SpreadAmountCurrency",
                                "OLD"."SourceSystemID" as "OLD_SourceSystemID",
                                "OLD"."ChangeTimestampInSourceSystem" as "OLD_ChangeTimestampInSourceSystem",
                                "OLD"."ChangingUserInSourceSystem" as "OLD_ChangingUserInSourceSystem",
                                "OLD"."ChangingProcessType" as "OLD_ChangingProcessType",
                                "OLD"."ChangingProcessID" as "OLD_ChangingProcessID"
            from :row as "IN"
            inner join "sap.fsdm::CommoditySwapCalculationPeriod" as "OLD"
            on
                ( case when "IN"."IntervalEndDate" is null then '0001-01-01' else "IN"."IntervalEndDate" end ) = "OLD"."IntervalEndDate" and
                ( case when "IN"."IntervalStartDate" is null then '0001-01-01' else "IN"."IntervalStartDate" end ) = "OLD"."IntervalStartDate" and
                ( case when "IN"."RoleOfPayer" is null then '' else "IN"."RoleOfPayer" end ) = "OLD"."RoleOfPayer" and
                ( case when "IN"."_Swap.FinancialContractID" is null then '' else "IN"."_Swap.FinancialContractID" end ) = "OLD"."_Swap.FinancialContractID" and
                ( case when "IN"."_Swap.IDSystem" is null then '' else "IN"."_Swap.IDSystem" end ) = "OLD"."_Swap.IDSystem" 
            where
                         ( "IN"."BusinessValidFrom" < "OLD"."BusinessValidTo" and "IN"."BusinessValidTo" > "OLD"."BusinessValidFrom" ) or
                         ( "IN"."BusinessValidFrom" = "OLD"."BusinessValidFrom" and "IN"."BusinessValidTo" = "OLD"."BusinessValidTo" ))
        where "BusinessValidFrom" > "NX_" );

    --Insert rightmost chunk
    insert into "sap.fsdm::CommoditySwapCalculationPeriod" (
        "IntervalEndDate",
        "IntervalStartDate",
        "RoleOfPayer",
        "_Swap.FinancialContractID",
        "_Swap.IDSystem",
        "BusinessValidFrom",
        "BusinessValidTo",
        "BusinessCalendar",
        "BusinessDayConvention",
        "DeliveryDate",
        "FixedPriceCurrency",
        "FixedPricePerUnit",
        "NotionalQuantity",
        "NotionalQuantityUnit",
        "PricingDate",
        "Spread",
        "SpreadAmount",
        "SpreadAmountCurrency",
        "SourceSystemID",
        "ChangeTimestampInSourceSystem",
        "ChangingUserInSourceSystem",
        "ChangingProcessType",
        "ChangingProcessID"
    )
    (
        select
            "OLD_IntervalEndDate" as "IntervalEndDate",
            "OLD_IntervalStartDate" as "IntervalStartDate",
            "OLD_RoleOfPayer" as "RoleOfPayer",
            "OLD__Swap.FinancialContractID" as "_Swap.FinancialContractID",
            "OLD__Swap.IDSystem" as "_Swap.IDSystem",
            "BusinessValidTo" as "BusinessValidFrom",
            "OLD_BusinessValidTo" as "BusinessValidTo",
            "OLD_BusinessCalendar" as "BusinessCalendar",
            "OLD_BusinessDayConvention" as "BusinessDayConvention",
            "OLD_DeliveryDate" as "DeliveryDate",
            "OLD_FixedPriceCurrency" as "FixedPriceCurrency",
            "OLD_FixedPricePerUnit" as "FixedPricePerUnit",
            "OLD_NotionalQuantity" as "NotionalQuantity",
            "OLD_NotionalQuantityUnit" as "NotionalQuantityUnit",
            "OLD_PricingDate" as "PricingDate",
            "OLD_Spread" as "Spread",
            "OLD_SpreadAmount" as "SpreadAmount",
            "OLD_SpreadAmountCurrency" as "SpreadAmountCurrency",
            "OLD_SourceSystemID" as "SourceSystemID",
            "OLD_ChangeTimestampInSourceSystem" as "ChangeTimestampInSourceSystem",
            "OLD_ChangingUserInSourceSystem" as "ChangingUserInSourceSystem",
            "OLD_ChangingProcessType" as "ChangingProcessType",
            "OLD_ChangingProcessID" as "ChangingProcessID"
        from
        (
            select
                lead("IN"."BusinessValidFrom", 1, "OLD"."BusinessValidTo")
                over ( partition by
                        "IN"."IntervalEndDate",
                        "IN"."IntervalStartDate",
                        "IN"."RoleOfPayer",
                        "IN"."_Swap.FinancialContractID",
                        "IN"."_Swap.IDSystem",
                        "OLD"."BusinessValidFrom"
                order by "IN"."BusinessValidFrom") AS "NY_",
                "IN"."BusinessValidTo",
                        "OLD"."IntervalEndDate" as "OLD_IntervalEndDate",
                        "OLD"."IntervalStartDate" as "OLD_IntervalStartDate",
                        "OLD"."RoleOfPayer" as "OLD_RoleOfPayer",
                        "OLD"."_Swap.FinancialContractID" as "OLD__Swap.FinancialContractID",
                        "OLD"."_Swap.IDSystem" as "OLD__Swap.IDSystem",
                        "OLD"."BusinessValidFrom" as "OLD_BusinessValidFrom",
                        "OLD"."BusinessValidTo" as "OLD_BusinessValidTo",
            "OLD"."SystemValidFrom" as "OLD_SystemValidFrom",
            "OLD"."SystemValidTo" as "OLD_SystemValidTo",
                        "OLD"."BusinessCalendar" as "OLD_BusinessCalendar",
                        "OLD"."BusinessDayConvention" as "OLD_BusinessDayConvention",
                        "OLD"."DeliveryDate" as "OLD_DeliveryDate",
                        "OLD"."FixedPriceCurrency" as "OLD_FixedPriceCurrency",
                        "OLD"."FixedPricePerUnit" as "OLD_FixedPricePerUnit",
                        "OLD"."NotionalQuantity" as "OLD_NotionalQuantity",
                        "OLD"."NotionalQuantityUnit" as "OLD_NotionalQuantityUnit",
                        "OLD"."PricingDate" as "OLD_PricingDate",
                        "OLD"."Spread" as "OLD_Spread",
                        "OLD"."SpreadAmount" as "OLD_SpreadAmount",
                        "OLD"."SpreadAmountCurrency" as "OLD_SpreadAmountCurrency",
                        "OLD"."SourceSystemID" as "OLD_SourceSystemID",
                        "OLD"."ChangeTimestampInSourceSystem" as "OLD_ChangeTimestampInSourceSystem",
                        "OLD"."ChangingUserInSourceSystem" as "OLD_ChangingUserInSourceSystem",
                        "OLD"."ChangingProcessType" as "OLD_ChangingProcessType",
                        "OLD"."ChangingProcessID" as "OLD_ChangingProcessID"
            from :row as "IN"
            inner join "sap.fsdm::CommoditySwapCalculationPeriod" as "OLD"
            on
                ( case when "IN"."IntervalEndDate" is null then '0001-01-01' else "IN"."IntervalEndDate" end ) = "OLD"."IntervalEndDate" and
                ( case when "IN"."IntervalStartDate" is null then '0001-01-01' else "IN"."IntervalStartDate" end ) = "OLD"."IntervalStartDate" and
                ( case when "IN"."RoleOfPayer" is null then '' else "IN"."RoleOfPayer" end ) = "OLD"."RoleOfPayer" and
                ( case when "IN"."_Swap.FinancialContractID" is null then '' else "IN"."_Swap.FinancialContractID" end ) = "OLD"."_Swap.FinancialContractID" and
                ( case when "IN"."_Swap.IDSystem" is null then '' else "IN"."_Swap.IDSystem" end ) = "OLD"."_Swap.IDSystem" 
            where
                         ( "IN"."BusinessValidFrom" < "OLD"."BusinessValidTo" and "IN"."BusinessValidTo" > "OLD"."BusinessValidFrom" ) or
                         ( "IN"."BusinessValidFrom" = "OLD"."BusinessValidFrom" and "IN"."BusinessValidTo" = "OLD"."BusinessValidTo" ))
        where "NY_" = "OLD_BusinessValidTo" and "OLD_BusinessValidTo" > "BusinessValidTo");

    delete from "sap.fsdm::CommoditySwapCalculationPeriod"
    where (
        "IntervalEndDate",
        "IntervalStartDate",
        "RoleOfPayer",
        "_Swap.FinancialContractID",
        "_Swap.IDSystem",
        "BusinessValidFrom",
        "BusinessValidTo"
    )
    in
    (
        select
            "OLD"."IntervalEndDate",
            "OLD"."IntervalStartDate",
            "OLD"."RoleOfPayer",
            "OLD"."_Swap.FinancialContractID",
            "OLD"."_Swap.IDSystem",
            "OLD"."BusinessValidFrom",
            "OLD"."BusinessValidTo"
        from :row as "IN"
        inner join "sap.fsdm::CommoditySwapCalculationPeriod" as "OLD"
        on
           ( case when "IN"."IntervalEndDate" is null then '0001-01-01' else "IN"."IntervalEndDate" end ) = "OLD"."IntervalEndDate" and
           ( case when "IN"."IntervalStartDate" is null then '0001-01-01' else "IN"."IntervalStartDate" end ) = "OLD"."IntervalStartDate" and
           ( case when "IN"."RoleOfPayer" is null then '' else "IN"."RoleOfPayer" end ) = "OLD"."RoleOfPayer" and
           ( case when "IN"."_Swap.FinancialContractID" is null then '' else "IN"."_Swap.FinancialContractID" end ) = "OLD"."_Swap.FinancialContractID" and
           ( case when "IN"."_Swap.IDSystem" is null then '' else "IN"."_Swap.IDSystem" end ) = "OLD"."_Swap.IDSystem" 
        where
           ( "IN"."BusinessValidFrom" < "OLD"."BusinessValidTo" and "IN"."BusinessValidTo" > "OLD"."BusinessValidFrom" ) or
           ( "IN"."BusinessValidFrom" = "OLD"."BusinessValidFrom" and "IN"."BusinessValidTo" = "OLD"."BusinessValidTo" ));

    --Insert ALL the input data 
    insert into "sap.fsdm::CommoditySwapCalculationPeriod" (
        "IntervalEndDate",
        "IntervalStartDate",
        "RoleOfPayer",
        "_Swap.FinancialContractID",
        "_Swap.IDSystem",
        "BusinessValidFrom",
        "BusinessValidTo",
        "BusinessCalendar",
        "BusinessDayConvention",
        "DeliveryDate",
        "FixedPriceCurrency",
        "FixedPricePerUnit",
        "NotionalQuantity",
        "NotionalQuantityUnit",
        "PricingDate",
        "Spread",
        "SpreadAmount",
        "SpreadAmountCurrency",
        "SourceSystemID",
        "ChangeTimestampInSourceSystem",
        "ChangingUserInSourceSystem",
        "ChangingProcessType",
        "ChangingProcessID"
)    (
        select
            ( case when "IntervalEndDate" is null then '0001-01-01' else "IntervalEndDate" end ) as "IntervalEndDate",
            ( case when "IntervalStartDate" is null then '0001-01-01' else "IntervalStartDate" end ) as "IntervalStartDate",
            ( case when "RoleOfPayer" is null then '' else "RoleOfPayer" end ) as "RoleOfPayer",
            ( case when "_Swap.FinancialContractID" is null then '' else "_Swap.FinancialContractID" end ) as "_Swap.FinancialContractID",
            ( case when "_Swap.IDSystem" is null then '' else "_Swap.IDSystem" end ) as "_Swap.IDSystem",
            "BusinessValidFrom"  ,
            "BusinessValidTo"  ,
            "BusinessCalendar"  ,
            "BusinessDayConvention"  ,
            "DeliveryDate"  ,
            "FixedPriceCurrency"  ,
            "FixedPricePerUnit"  ,
            "NotionalQuantity"  ,
            "NotionalQuantityUnit"  ,
            "PricingDate"  ,
            "Spread"  ,
            "SpreadAmount"  ,
            "SpreadAmountCurrency"  ,
            "SourceSystemID"  ,
            "ChangeTimestampInSourceSystem"  ,
            "ChangingUserInSourceSystem"  ,
            "ChangingProcessType"  ,
            "ChangingProcessID"  
        from :row );

END