PROCEDURE "sap.fsdm.procedures::CaseReserveItemDelete" (IN ROW "sap.fsdm.tabletypes::CaseReserveItemTT_Del")
  LANGUAGE SQLSCRIPT
  SQL SECURITY DEFINER
  AS
BEGIN

    --Check for period overlap
    declare period_overlap condition for sql_error_code 10001;
    declare exit handler for period_overlap
        begin
            declare err_msg clob;
            select TOP 1
                'Business Period Overlap: Key ' ||
                'ReserveChangeDate=' || TO_VARCHAR("ReserveChangeDate") || ' ' ||
                '_CaseReserve.Type=' || TO_VARCHAR("_CaseReserve.Type") || ' ' ||
                ':Business Period Overlap Error'
            into err_msg
            from
            (
                select
                    "IN"."BusinessValidFrom" as "X",
                    "IN"."BusinessValidTo" as "Y",
                    lag ( "IN"."BusinessValidFrom", 1)
                    over ( partition by
                        "IN"."ReserveChangeDate",
                        "IN"."_CaseReserve.Type"
                    order by "IN"."BusinessValidFrom") as "NX_",
                    lag("IN"."BusinessValidTo", 1)
                    over ( partition by
                        "IN"."ReserveChangeDate",
                        "IN"."_CaseReserve.Type"
                    order by "IN"."BusinessValidFrom") as "NY_",
                        "ReserveChangeDate",
                        "_CaseReserve.Type"
                from :row as "IN"
            )
            where ("X" >= "NX_" and "X" < "NY_") or ("Y" > "NX_" and "Y" <= "NY_");
            resignal set message_text = :err_msg;
        end;

    var_overlap = select *
                    from
                    (
                        select
                            "IN"."BusinessValidFrom" as "X",
                            "IN"."BusinessValidTo" as "Y",
                            lag ( "IN"."BusinessValidFrom", 1)
                            over ( partition by
                                    "IN"."ReserveChangeDate",
                                    "IN"."_CaseReserve.Type"
                            order by "IN"."BusinessValidFrom") as "NX_",
                            lag ( "IN"."BusinessValidTo", 1)
                            over ( partition by
                                    "IN"."ReserveChangeDate",
                                    "IN"."_CaseReserve.Type"
                            order by "IN"."BusinessValidFrom") as "NY_"
                from :row as "IN"
                )
                where ("X" >= "NX_" and "X" < "NY_") or ("Y" > "NX_" and "Y" <= "NY_");

    if not is_empty(:var_overlap) then
      signal period_overlap;
    end if;

    :var_overlap.delete();

    --Insert chunked versions of object
    insert into "sap.fsdm::CaseReserveItem" (
        "ReserveChangeDate",
        "_CaseReserve.Type",
        "BusinessValidFrom",
        "BusinessValidTo",
        "_CaseReserveItem.ReserveChangeDate",
        "_CaseReserveItem._CaseReserve.Type",
        "Amount",
        "Currency",
        "PostingDate",
        "ReserveChangeReason",
        "ReversedIndicator",
        "Type",
        "SourceSystemID",
        "ChangeTimestampInSourceSystem",
        "ChangingUserInSourceSystem",
        "ChangingProcessType",
        "ChangingProcessID"
    )
    (
        select
            "OLD_ReserveChangeDate" as "ReserveChangeDate" ,
            "OLD__CaseReserve.Type" as "_CaseReserve.Type" ,
            "NX_" as "BusinessValidFrom" ,
            "BusinessValidFrom" as "BusinessValidTo" ,
            "OLD__CaseReserveItem.ReserveChangeDate" as "_CaseReserveItem.ReserveChangeDate" ,
            "OLD__CaseReserveItem._CaseReserve.Type" as "_CaseReserveItem._CaseReserve.Type" ,
            "OLD_Amount" as "Amount" ,
            "OLD_Currency" as "Currency" ,
            "OLD_PostingDate" as "PostingDate" ,
            "OLD_ReserveChangeReason" as "ReserveChangeReason" ,
            "OLD_ReversedIndicator" as "ReversedIndicator" ,
            "OLD_Type" as "Type" ,
            "OLD_SourceSystemID" as "SourceSystemID" ,
            "OLD_ChangeTimestampInSourceSystem" as "ChangeTimestampInSourceSystem" ,
            "OLD_ChangingUserInSourceSystem" as "ChangingUserInSourceSystem" ,
            "OLD_ChangingProcessType" as "ChangingProcessType" ,
            "OLD_ChangingProcessID" as "ChangingProcessID" 
        from
        (
            select
                lag("IN"."BusinessValidTo", 1, "OLD"."BusinessValidFrom")
                over ( partition by
                        "OLD"."ReserveChangeDate",
                        "OLD"."_CaseReserve.Type",
                        "OLD"."BusinessValidFrom"
                       order by "OLD"."BusinessValidFrom") as "NX_",
                "IN"."BusinessValidFrom",
                "OLD"."ReserveChangeDate" as "OLD_ReserveChangeDate",
                "OLD"."_CaseReserve.Type" as "OLD__CaseReserve.Type",
                "OLD"."BusinessValidFrom" as "OLD_BusinessValidFrom",
                "OLD"."BusinessValidTo" as "OLD_BusinessValidTo",
                "OLD"."SystemValidFrom" as "OLD_SystemValidFrom",
                "OLD"."SystemValidTo" as "OLD_SystemValidTo",
                "OLD"."_CaseReserveItem.ReserveChangeDate" as "OLD__CaseReserveItem.ReserveChangeDate",
                "OLD"."_CaseReserveItem._CaseReserve.Type" as "OLD__CaseReserveItem._CaseReserve.Type",
                "OLD"."Amount" as "OLD_Amount",
                "OLD"."Currency" as "OLD_Currency",
                "OLD"."PostingDate" as "OLD_PostingDate",
                "OLD"."ReserveChangeReason" as "OLD_ReserveChangeReason",
                "OLD"."ReversedIndicator" as "OLD_ReversedIndicator",
                "OLD"."Type" as "OLD_Type",
                "OLD"."SourceSystemID" as "OLD_SourceSystemID",
                "OLD"."ChangeTimestampInSourceSystem" as "OLD_ChangeTimestampInSourceSystem",
                "OLD"."ChangingUserInSourceSystem" as "OLD_ChangingUserInSourceSystem",
                "OLD"."ChangingProcessType" as "OLD_ChangingProcessType",
                "OLD"."ChangingProcessID" as "OLD_ChangingProcessID"
            from :row as "IN"
            inner join "sap.fsdm::CaseReserveItem" as "OLD"
            on
                      ( "IN"."ReserveChangeDate" = "OLD"."ReserveChangeDate" or "IN"."ReserveChangeDate" is null ) and
                      ( "IN"."_CaseReserve.Type" = "OLD"."_CaseReserve.Type" or "IN"."_CaseReserve.Type" is null ) 
            where
                         ( "IN"."BusinessValidFrom" < "OLD"."BusinessValidTo" and "IN"."BusinessValidTo" > "OLD"."BusinessValidFrom" ) or
                         ( "IN"."BusinessValidFrom" = "OLD"."BusinessValidFrom" and "IN"."BusinessValidTo" = "OLD"."BusinessValidTo" ))
        where "BusinessValidFrom" > "NX_" );

    --Insert rightmost chunk
    insert into "sap.fsdm::CaseReserveItem" (
        "ReserveChangeDate",
        "_CaseReserve.Type",
        "BusinessValidFrom",
        "BusinessValidTo",
        "_CaseReserveItem.ReserveChangeDate",
        "_CaseReserveItem._CaseReserve.Type",
        "Amount",
        "Currency",
        "PostingDate",
        "ReserveChangeReason",
        "ReversedIndicator",
        "Type",
        "SourceSystemID",
        "ChangeTimestampInSourceSystem",
        "ChangingUserInSourceSystem",
        "ChangingProcessType",
        "ChangingProcessID"
    )
    (
        select
            "OLD_ReserveChangeDate" as "ReserveChangeDate",
            "OLD__CaseReserve.Type" as "_CaseReserve.Type",
            "BusinessValidTo" as "BusinessValidFrom",
            "OLD_BusinessValidTo" as "BusinessValidTo",
            "OLD__CaseReserveItem.ReserveChangeDate" as "_CaseReserveItem.ReserveChangeDate",
            "OLD__CaseReserveItem._CaseReserve.Type" as "_CaseReserveItem._CaseReserve.Type",
            "OLD_Amount" as "Amount",
            "OLD_Currency" as "Currency",
            "OLD_PostingDate" as "PostingDate",
            "OLD_ReserveChangeReason" as "ReserveChangeReason",
            "OLD_ReversedIndicator" as "ReversedIndicator",
            "OLD_Type" as "Type",
            "OLD_SourceSystemID" as "SourceSystemID",
            "OLD_ChangeTimestampInSourceSystem" as "ChangeTimestampInSourceSystem",
            "OLD_ChangingUserInSourceSystem" as "ChangingUserInSourceSystem",
            "OLD_ChangingProcessType" as "ChangingProcessType",
            "OLD_ChangingProcessID" as "ChangingProcessID"
        from
        (
            select
                lead("IN"."BusinessValidFrom", 1, "OLD"."BusinessValidTo")
                over ( partition by
                        "OLD"."ReserveChangeDate",
                        "OLD"."_CaseReserve.Type",
                        "OLD"."BusinessValidFrom"
                order by "OLD"."BusinessValidFrom") AS "NY_",
                "IN"."BusinessValidTo",
                "OLD"."ReserveChangeDate" as "OLD_ReserveChangeDate",
                "OLD"."_CaseReserve.Type" as "OLD__CaseReserve.Type",
                "OLD"."BusinessValidFrom" as "OLD_BusinessValidFrom",
                "OLD"."BusinessValidTo" as "OLD_BusinessValidTo",
                "OLD"."SystemValidFrom" as "OLD_SystemValidFrom",
                "OLD"."SystemValidTo" as "OLD_SystemValidTo",
                "OLD"."_CaseReserveItem.ReserveChangeDate" as "OLD__CaseReserveItem.ReserveChangeDate",
                "OLD"."_CaseReserveItem._CaseReserve.Type" as "OLD__CaseReserveItem._CaseReserve.Type",
                "OLD"."Amount" as "OLD_Amount",
                "OLD"."Currency" as "OLD_Currency",
                "OLD"."PostingDate" as "OLD_PostingDate",
                "OLD"."ReserveChangeReason" as "OLD_ReserveChangeReason",
                "OLD"."ReversedIndicator" as "OLD_ReversedIndicator",
                "OLD"."Type" as "OLD_Type",
                "OLD"."SourceSystemID" as "OLD_SourceSystemID",
                "OLD"."ChangeTimestampInSourceSystem" as "OLD_ChangeTimestampInSourceSystem",
                "OLD"."ChangingUserInSourceSystem" as "OLD_ChangingUserInSourceSystem",
                "OLD"."ChangingProcessType" as "OLD_ChangingProcessType",
                "OLD"."ChangingProcessID" as "OLD_ChangingProcessID"
            from :row as "IN"
            inner join "sap.fsdm::CaseReserveItem" as "OLD"
            on
                                                ( "IN"."ReserveChangeDate" = "OLD"."ReserveChangeDate" or "IN"."ReserveChangeDate" is null ) and
                                                ( "IN"."_CaseReserve.Type" = "OLD"."_CaseReserve.Type" or "IN"."_CaseReserve.Type" is null ) 
            where
                         ( "IN"."BusinessValidFrom" < "OLD"."BusinessValidTo" and "IN"."BusinessValidTo" > "OLD"."BusinessValidFrom" ) or
                         ( "IN"."BusinessValidFrom" = "OLD"."BusinessValidFrom" and "IN"."BusinessValidTo" = "OLD"."BusinessValidTo" ))
        where "NY_" = "OLD_BusinessValidTo" and "OLD_BusinessValidTo" > "BusinessValidTo");

    delete from "sap.fsdm::CaseReserveItem"
    where (
        "ReserveChangeDate",
        "_CaseReserve.Type",
        "BusinessValidFrom",
        "BusinessValidTo"
    )
    in
    (
        select
            "OLD"."ReserveChangeDate",
            "OLD"."_CaseReserve.Type",
            "OLD"."BusinessValidFrom",
            "OLD"."BusinessValidTo"
        from :row as "IN"
        inner join "sap.fsdm::CaseReserveItem" as "OLD"
        on
                                       ( "IN"."ReserveChangeDate" = "OLD"."ReserveChangeDate" or "IN"."ReserveChangeDate" is null ) and
                                       ( "IN"."_CaseReserve.Type" = "OLD"."_CaseReserve.Type" or "IN"."_CaseReserve.Type" is null ) 
        where
           ( "IN"."BusinessValidFrom" < "OLD"."BusinessValidTo" and "IN"."BusinessValidTo" > "OLD"."BusinessValidFrom" ) or
           ( "IN"."BusinessValidFrom" = "OLD"."BusinessValidFrom" and "IN"."BusinessValidTo" = "OLD"."BusinessValidTo" ));

END
