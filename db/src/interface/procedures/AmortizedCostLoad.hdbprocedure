PROCEDURE "sap.fsdm.procedures::AmortizedCostLoad" (IN ROW "sap.fsdm.tabletypes::AmortizedCostTT")
  LANGUAGE SQLSCRIPT
  SQL SECURITY DEFINER
  AS
BEGIN

    --Check for period overlap
    declare period_overlap condition for sql_error_code 10001;
    declare exit handler for period_overlap
        begin
            declare err_msg clob;
            select TOP 1
                'Business Period Overlap: Key ' ||
                'ACCalculationMethod=' || TO_VARCHAR("ACCalculationMethod") || ' ' ||
                '_AccountingSystem.AccountingSystemID=' || TO_VARCHAR("_AccountingSystem.AccountingSystemID") || ' ' ||
                '_FinancialContract.FinancialContractID=' || TO_VARCHAR("_FinancialContract.FinancialContractID") || ' ' ||
                '_FinancialContract.IDSystem=' || TO_VARCHAR("_FinancialContract.IDSystem") || ' ' ||
                '_FinancialInstrument.FinancialInstrumentID=' || TO_VARCHAR("_FinancialInstrument.FinancialInstrumentID") || ' ' ||
                '_InvestmentAccount.FinancialContractID=' || TO_VARCHAR("_InvestmentAccount.FinancialContractID") || ' ' ||
                '_InvestmentAccount.IDSystem=' || TO_VARCHAR("_InvestmentAccount.IDSystem") || ' ' ||
                ':Business Period Overlap Error'
            into err_msg
            from
            (
                select
                    "IN"."BusinessValidFrom" as "X",
                    "IN"."BusinessValidTo" as "Y",
                    lag ( "IN"."BusinessValidFrom", 1)
                    over ( partition by
                        "IN"."ACCalculationMethod",
                        "IN"."_AccountingSystem.AccountingSystemID",
                        "IN"."_FinancialContract.FinancialContractID",
                        "IN"."_FinancialContract.IDSystem",
                        "IN"."_FinancialInstrument.FinancialInstrumentID",
                        "IN"."_InvestmentAccount.FinancialContractID",
                        "IN"."_InvestmentAccount.IDSystem"
                    order by "IN"."BusinessValidFrom") as "NX_",
                    lag("IN"."BusinessValidTo", 1)
                    over ( partition by
                        "IN"."ACCalculationMethod",
                        "IN"."_AccountingSystem.AccountingSystemID",
                        "IN"."_FinancialContract.FinancialContractID",
                        "IN"."_FinancialContract.IDSystem",
                        "IN"."_FinancialInstrument.FinancialInstrumentID",
                        "IN"."_InvestmentAccount.FinancialContractID",
                        "IN"."_InvestmentAccount.IDSystem"
                    order by "IN"."BusinessValidFrom") as "NY_",
                        "ACCalculationMethod",
                        "_AccountingSystem.AccountingSystemID",
                        "_FinancialContract.FinancialContractID",
                        "_FinancialContract.IDSystem",
                        "_FinancialInstrument.FinancialInstrumentID",
                        "_InvestmentAccount.FinancialContractID",
                        "_InvestmentAccount.IDSystem"
                from :row as "IN"
            )
            where ("X" >= "NX_" and "X" < "NY_") or ("Y" > "NX_" and "Y" <= "NY_");
            resignal set message_text = :err_msg;
        end;

    var_overlap = select *
                    from
                    (
                        select
                            "IN"."BusinessValidFrom" as "X",
                            "IN"."BusinessValidTo" as "Y",
                            lag ( "IN"."BusinessValidFrom", 1)
                            over ( partition by
                                    "IN"."ACCalculationMethod",
                                    "IN"."_AccountingSystem.AccountingSystemID",
                                    "IN"."_FinancialContract.FinancialContractID",
                                    "IN"."_FinancialContract.IDSystem",
                                    "IN"."_FinancialInstrument.FinancialInstrumentID",
                                    "IN"."_InvestmentAccount.FinancialContractID",
                                    "IN"."_InvestmentAccount.IDSystem"
                            order by "IN"."BusinessValidFrom") as "NX_",
                            lag ( "IN"."BusinessValidTo", 1)
                            over ( partition by
                                    "IN"."ACCalculationMethod",
                                    "IN"."_AccountingSystem.AccountingSystemID",
                                    "IN"."_FinancialContract.FinancialContractID",
                                    "IN"."_FinancialContract.IDSystem",
                                    "IN"."_FinancialInstrument.FinancialInstrumentID",
                                    "IN"."_InvestmentAccount.FinancialContractID",
                                    "IN"."_InvestmentAccount.IDSystem"
                            order by "IN"."BusinessValidFrom") as "NY_"
                from :row as "IN"
                )
                where ("X" >= "NX_" and "X" < "NY_") or ("Y" > "NX_" and "Y" <= "NY_");

    if not is_empty(:var_overlap) then
      signal period_overlap;
    end if;

    :var_overlap.delete();

    --Insert chunked versions of object
    insert into "sap.fsdm::AmortizedCost" (
        "ACCalculationMethod",
        "_AccountingSystem.AccountingSystemID",
        "_FinancialContract.FinancialContractID",
        "_FinancialContract.IDSystem",
        "_FinancialInstrument.FinancialInstrumentID",
        "_InvestmentAccount.FinancialContractID",
        "_InvestmentAccount.IDSystem",
        "BusinessValidFrom",
        "BusinessValidTo",
        "AC1PaymentCurrency",
        "AC1PositionCurrency",
        "AC1TimeInPaymentCurrency",
        "AC1TimeInPositionCurrency",
        "ACCPaymentCurrency",
        "ACCPositionCurrency",
        "ACCrossEffectInPaymentCurrency",
        "ACCrossEffectInPositionCurrency",
        "ACInPaymentCurrency",
        "ACInPositionCurrency",
        "ACPaymentCurrency",
        "ACPositionCurrency",
        "EffectiveInterestRate",
        "SourceSystemID",
        "ChangeTimestampInSourceSystem",
        "ChangingUserInSourceSystem",
        "ChangingProcessType",
        "ChangingProcessID"
    )
    (
        select
            "OLD_ACCalculationMethod" as "ACCalculationMethod" ,
            "OLD__AccountingSystem.AccountingSystemID" as "_AccountingSystem.AccountingSystemID" ,
            "OLD__FinancialContract.FinancialContractID" as "_FinancialContract.FinancialContractID" ,
            "OLD__FinancialContract.IDSystem" as "_FinancialContract.IDSystem" ,
            "OLD__FinancialInstrument.FinancialInstrumentID" as "_FinancialInstrument.FinancialInstrumentID" ,
            "OLD__InvestmentAccount.FinancialContractID" as "_InvestmentAccount.FinancialContractID" ,
            "OLD__InvestmentAccount.IDSystem" as "_InvestmentAccount.IDSystem" ,
            "NX_" as "BusinessValidFrom" ,
            "BusinessValidFrom" as "BusinessValidTo" ,
            "OLD_AC1PaymentCurrency" as "AC1PaymentCurrency" ,
            "OLD_AC1PositionCurrency" as "AC1PositionCurrency" ,
            "OLD_AC1TimeInPaymentCurrency" as "AC1TimeInPaymentCurrency" ,
            "OLD_AC1TimeInPositionCurrency" as "AC1TimeInPositionCurrency" ,
            "OLD_ACCPaymentCurrency" as "ACCPaymentCurrency" ,
            "OLD_ACCPositionCurrency" as "ACCPositionCurrency" ,
            "OLD_ACCrossEffectInPaymentCurrency" as "ACCrossEffectInPaymentCurrency" ,
            "OLD_ACCrossEffectInPositionCurrency" as "ACCrossEffectInPositionCurrency" ,
            "OLD_ACInPaymentCurrency" as "ACInPaymentCurrency" ,
            "OLD_ACInPositionCurrency" as "ACInPositionCurrency" ,
            "OLD_ACPaymentCurrency" as "ACPaymentCurrency" ,
            "OLD_ACPositionCurrency" as "ACPositionCurrency" ,
            "OLD_EffectiveInterestRate" as "EffectiveInterestRate" ,
            "OLD_SourceSystemID" as "SourceSystemID" ,
            "OLD_ChangeTimestampInSourceSystem" as "ChangeTimestampInSourceSystem" ,
            "OLD_ChangingUserInSourceSystem" as "ChangingUserInSourceSystem" ,
            "OLD_ChangingProcessType" as "ChangingProcessType" ,
            "OLD_ChangingProcessID" as "ChangingProcessID" 
        from
        (
            select
                lag("IN"."BusinessValidTo", 1, "OLD"."BusinessValidFrom")
                over ( partition by
                        "IN"."ACCalculationMethod",
                        "IN"."_AccountingSystem.AccountingSystemID",
                        "IN"."_FinancialContract.FinancialContractID",
                        "IN"."_FinancialContract.IDSystem",
                        "IN"."_FinancialInstrument.FinancialInstrumentID",
                        "IN"."_InvestmentAccount.FinancialContractID",
                        "IN"."_InvestmentAccount.IDSystem",
                        "OLD"."BusinessValidFrom"
                       order by "IN"."BusinessValidFrom") as "NX_",
                "IN"."BusinessValidFrom",
                                "OLD"."ACCalculationMethod" as "OLD_ACCalculationMethod",
                                "OLD"."_AccountingSystem.AccountingSystemID" as "OLD__AccountingSystem.AccountingSystemID",
                                "OLD"."_FinancialContract.FinancialContractID" as "OLD__FinancialContract.FinancialContractID",
                                "OLD"."_FinancialContract.IDSystem" as "OLD__FinancialContract.IDSystem",
                                "OLD"."_FinancialInstrument.FinancialInstrumentID" as "OLD__FinancialInstrument.FinancialInstrumentID",
                                "OLD"."_InvestmentAccount.FinancialContractID" as "OLD__InvestmentAccount.FinancialContractID",
                                "OLD"."_InvestmentAccount.IDSystem" as "OLD__InvestmentAccount.IDSystem",
                                "OLD"."BusinessValidFrom" as "OLD_BusinessValidFrom",
                                "OLD"."BusinessValidTo" as "OLD_BusinessValidTo",
                "OLD"."SystemValidFrom" as "OLD_SystemValidFrom",
                "OLD"."SystemValidTo" as "OLD_SystemValidTo",
                                "OLD"."AC1PaymentCurrency" as "OLD_AC1PaymentCurrency",
                                "OLD"."AC1PositionCurrency" as "OLD_AC1PositionCurrency",
                                "OLD"."AC1TimeInPaymentCurrency" as "OLD_AC1TimeInPaymentCurrency",
                                "OLD"."AC1TimeInPositionCurrency" as "OLD_AC1TimeInPositionCurrency",
                                "OLD"."ACCPaymentCurrency" as "OLD_ACCPaymentCurrency",
                                "OLD"."ACCPositionCurrency" as "OLD_ACCPositionCurrency",
                                "OLD"."ACCrossEffectInPaymentCurrency" as "OLD_ACCrossEffectInPaymentCurrency",
                                "OLD"."ACCrossEffectInPositionCurrency" as "OLD_ACCrossEffectInPositionCurrency",
                                "OLD"."ACInPaymentCurrency" as "OLD_ACInPaymentCurrency",
                                "OLD"."ACInPositionCurrency" as "OLD_ACInPositionCurrency",
                                "OLD"."ACPaymentCurrency" as "OLD_ACPaymentCurrency",
                                "OLD"."ACPositionCurrency" as "OLD_ACPositionCurrency",
                                "OLD"."EffectiveInterestRate" as "OLD_EffectiveInterestRate",
                                "OLD"."SourceSystemID" as "OLD_SourceSystemID",
                                "OLD"."ChangeTimestampInSourceSystem" as "OLD_ChangeTimestampInSourceSystem",
                                "OLD"."ChangingUserInSourceSystem" as "OLD_ChangingUserInSourceSystem",
                                "OLD"."ChangingProcessType" as "OLD_ChangingProcessType",
                                "OLD"."ChangingProcessID" as "OLD_ChangingProcessID"
            from :row as "IN"
            inner join "sap.fsdm::AmortizedCost" as "OLD"
            on
                ( case when "IN"."ACCalculationMethod" is null then '' else "IN"."ACCalculationMethod" end ) = "OLD"."ACCalculationMethod" and
                ( case when "IN"."_AccountingSystem.AccountingSystemID" is null then '' else "IN"."_AccountingSystem.AccountingSystemID" end ) = "OLD"."_AccountingSystem.AccountingSystemID" and
                ( case when "IN"."_FinancialContract.FinancialContractID" is null then '' else "IN"."_FinancialContract.FinancialContractID" end ) = "OLD"."_FinancialContract.FinancialContractID" and
                ( case when "IN"."_FinancialContract.IDSystem" is null then '' else "IN"."_FinancialContract.IDSystem" end ) = "OLD"."_FinancialContract.IDSystem" and
                ( case when "IN"."_FinancialInstrument.FinancialInstrumentID" is null then '' else "IN"."_FinancialInstrument.FinancialInstrumentID" end ) = "OLD"."_FinancialInstrument.FinancialInstrumentID" and
                ( case when "IN"."_InvestmentAccount.FinancialContractID" is null then '' else "IN"."_InvestmentAccount.FinancialContractID" end ) = "OLD"."_InvestmentAccount.FinancialContractID" and
                ( case when "IN"."_InvestmentAccount.IDSystem" is null then '' else "IN"."_InvestmentAccount.IDSystem" end ) = "OLD"."_InvestmentAccount.IDSystem" 
            where
                         ( "IN"."BusinessValidFrom" < "OLD"."BusinessValidTo" and "IN"."BusinessValidTo" > "OLD"."BusinessValidFrom" ) or
                         ( "IN"."BusinessValidFrom" = "OLD"."BusinessValidFrom" and "IN"."BusinessValidTo" = "OLD"."BusinessValidTo" ))
        where "BusinessValidFrom" > "NX_" );

    --Insert rightmost chunk
    insert into "sap.fsdm::AmortizedCost" (
        "ACCalculationMethod",
        "_AccountingSystem.AccountingSystemID",
        "_FinancialContract.FinancialContractID",
        "_FinancialContract.IDSystem",
        "_FinancialInstrument.FinancialInstrumentID",
        "_InvestmentAccount.FinancialContractID",
        "_InvestmentAccount.IDSystem",
        "BusinessValidFrom",
        "BusinessValidTo",
        "AC1PaymentCurrency",
        "AC1PositionCurrency",
        "AC1TimeInPaymentCurrency",
        "AC1TimeInPositionCurrency",
        "ACCPaymentCurrency",
        "ACCPositionCurrency",
        "ACCrossEffectInPaymentCurrency",
        "ACCrossEffectInPositionCurrency",
        "ACInPaymentCurrency",
        "ACInPositionCurrency",
        "ACPaymentCurrency",
        "ACPositionCurrency",
        "EffectiveInterestRate",
        "SourceSystemID",
        "ChangeTimestampInSourceSystem",
        "ChangingUserInSourceSystem",
        "ChangingProcessType",
        "ChangingProcessID"
    )
    (
        select
            "OLD_ACCalculationMethod" as "ACCalculationMethod",
            "OLD__AccountingSystem.AccountingSystemID" as "_AccountingSystem.AccountingSystemID",
            "OLD__FinancialContract.FinancialContractID" as "_FinancialContract.FinancialContractID",
            "OLD__FinancialContract.IDSystem" as "_FinancialContract.IDSystem",
            "OLD__FinancialInstrument.FinancialInstrumentID" as "_FinancialInstrument.FinancialInstrumentID",
            "OLD__InvestmentAccount.FinancialContractID" as "_InvestmentAccount.FinancialContractID",
            "OLD__InvestmentAccount.IDSystem" as "_InvestmentAccount.IDSystem",
            "BusinessValidTo" as "BusinessValidFrom",
            "OLD_BusinessValidTo" as "BusinessValidTo",
            "OLD_AC1PaymentCurrency" as "AC1PaymentCurrency",
            "OLD_AC1PositionCurrency" as "AC1PositionCurrency",
            "OLD_AC1TimeInPaymentCurrency" as "AC1TimeInPaymentCurrency",
            "OLD_AC1TimeInPositionCurrency" as "AC1TimeInPositionCurrency",
            "OLD_ACCPaymentCurrency" as "ACCPaymentCurrency",
            "OLD_ACCPositionCurrency" as "ACCPositionCurrency",
            "OLD_ACCrossEffectInPaymentCurrency" as "ACCrossEffectInPaymentCurrency",
            "OLD_ACCrossEffectInPositionCurrency" as "ACCrossEffectInPositionCurrency",
            "OLD_ACInPaymentCurrency" as "ACInPaymentCurrency",
            "OLD_ACInPositionCurrency" as "ACInPositionCurrency",
            "OLD_ACPaymentCurrency" as "ACPaymentCurrency",
            "OLD_ACPositionCurrency" as "ACPositionCurrency",
            "OLD_EffectiveInterestRate" as "EffectiveInterestRate",
            "OLD_SourceSystemID" as "SourceSystemID",
            "OLD_ChangeTimestampInSourceSystem" as "ChangeTimestampInSourceSystem",
            "OLD_ChangingUserInSourceSystem" as "ChangingUserInSourceSystem",
            "OLD_ChangingProcessType" as "ChangingProcessType",
            "OLD_ChangingProcessID" as "ChangingProcessID"
        from
        (
            select
                lead("IN"."BusinessValidFrom", 1, "OLD"."BusinessValidTo")
                over ( partition by
                        "IN"."ACCalculationMethod",
                        "IN"."_AccountingSystem.AccountingSystemID",
                        "IN"."_FinancialContract.FinancialContractID",
                        "IN"."_FinancialContract.IDSystem",
                        "IN"."_FinancialInstrument.FinancialInstrumentID",
                        "IN"."_InvestmentAccount.FinancialContractID",
                        "IN"."_InvestmentAccount.IDSystem",
                        "OLD"."BusinessValidFrom"
                order by "IN"."BusinessValidFrom") AS "NY_",
                "IN"."BusinessValidTo",
                        "OLD"."ACCalculationMethod" as "OLD_ACCalculationMethod",
                        "OLD"."_AccountingSystem.AccountingSystemID" as "OLD__AccountingSystem.AccountingSystemID",
                        "OLD"."_FinancialContract.FinancialContractID" as "OLD__FinancialContract.FinancialContractID",
                        "OLD"."_FinancialContract.IDSystem" as "OLD__FinancialContract.IDSystem",
                        "OLD"."_FinancialInstrument.FinancialInstrumentID" as "OLD__FinancialInstrument.FinancialInstrumentID",
                        "OLD"."_InvestmentAccount.FinancialContractID" as "OLD__InvestmentAccount.FinancialContractID",
                        "OLD"."_InvestmentAccount.IDSystem" as "OLD__InvestmentAccount.IDSystem",
                        "OLD"."BusinessValidFrom" as "OLD_BusinessValidFrom",
                        "OLD"."BusinessValidTo" as "OLD_BusinessValidTo",
            "OLD"."SystemValidFrom" as "OLD_SystemValidFrom",
            "OLD"."SystemValidTo" as "OLD_SystemValidTo",
                        "OLD"."AC1PaymentCurrency" as "OLD_AC1PaymentCurrency",
                        "OLD"."AC1PositionCurrency" as "OLD_AC1PositionCurrency",
                        "OLD"."AC1TimeInPaymentCurrency" as "OLD_AC1TimeInPaymentCurrency",
                        "OLD"."AC1TimeInPositionCurrency" as "OLD_AC1TimeInPositionCurrency",
                        "OLD"."ACCPaymentCurrency" as "OLD_ACCPaymentCurrency",
                        "OLD"."ACCPositionCurrency" as "OLD_ACCPositionCurrency",
                        "OLD"."ACCrossEffectInPaymentCurrency" as "OLD_ACCrossEffectInPaymentCurrency",
                        "OLD"."ACCrossEffectInPositionCurrency" as "OLD_ACCrossEffectInPositionCurrency",
                        "OLD"."ACInPaymentCurrency" as "OLD_ACInPaymentCurrency",
                        "OLD"."ACInPositionCurrency" as "OLD_ACInPositionCurrency",
                        "OLD"."ACPaymentCurrency" as "OLD_ACPaymentCurrency",
                        "OLD"."ACPositionCurrency" as "OLD_ACPositionCurrency",
                        "OLD"."EffectiveInterestRate" as "OLD_EffectiveInterestRate",
                        "OLD"."SourceSystemID" as "OLD_SourceSystemID",
                        "OLD"."ChangeTimestampInSourceSystem" as "OLD_ChangeTimestampInSourceSystem",
                        "OLD"."ChangingUserInSourceSystem" as "OLD_ChangingUserInSourceSystem",
                        "OLD"."ChangingProcessType" as "OLD_ChangingProcessType",
                        "OLD"."ChangingProcessID" as "OLD_ChangingProcessID"
            from :row as "IN"
            inner join "sap.fsdm::AmortizedCost" as "OLD"
            on
                ( case when "IN"."ACCalculationMethod" is null then '' else "IN"."ACCalculationMethod" end ) = "OLD"."ACCalculationMethod" and
                ( case when "IN"."_AccountingSystem.AccountingSystemID" is null then '' else "IN"."_AccountingSystem.AccountingSystemID" end ) = "OLD"."_AccountingSystem.AccountingSystemID" and
                ( case when "IN"."_FinancialContract.FinancialContractID" is null then '' else "IN"."_FinancialContract.FinancialContractID" end ) = "OLD"."_FinancialContract.FinancialContractID" and
                ( case when "IN"."_FinancialContract.IDSystem" is null then '' else "IN"."_FinancialContract.IDSystem" end ) = "OLD"."_FinancialContract.IDSystem" and
                ( case when "IN"."_FinancialInstrument.FinancialInstrumentID" is null then '' else "IN"."_FinancialInstrument.FinancialInstrumentID" end ) = "OLD"."_FinancialInstrument.FinancialInstrumentID" and
                ( case when "IN"."_InvestmentAccount.FinancialContractID" is null then '' else "IN"."_InvestmentAccount.FinancialContractID" end ) = "OLD"."_InvestmentAccount.FinancialContractID" and
                ( case when "IN"."_InvestmentAccount.IDSystem" is null then '' else "IN"."_InvestmentAccount.IDSystem" end ) = "OLD"."_InvestmentAccount.IDSystem" 
            where
                         ( "IN"."BusinessValidFrom" < "OLD"."BusinessValidTo" and "IN"."BusinessValidTo" > "OLD"."BusinessValidFrom" ) or
                         ( "IN"."BusinessValidFrom" = "OLD"."BusinessValidFrom" and "IN"."BusinessValidTo" = "OLD"."BusinessValidTo" ))
        where "NY_" = "OLD_BusinessValidTo" and "OLD_BusinessValidTo" > "BusinessValidTo");

    delete from "sap.fsdm::AmortizedCost"
    where (
        "ACCalculationMethod",
        "_AccountingSystem.AccountingSystemID",
        "_FinancialContract.FinancialContractID",
        "_FinancialContract.IDSystem",
        "_FinancialInstrument.FinancialInstrumentID",
        "_InvestmentAccount.FinancialContractID",
        "_InvestmentAccount.IDSystem",
        "BusinessValidFrom",
        "BusinessValidTo"
    )
    in
    (
        select
            "OLD"."ACCalculationMethod",
            "OLD"."_AccountingSystem.AccountingSystemID",
            "OLD"."_FinancialContract.FinancialContractID",
            "OLD"."_FinancialContract.IDSystem",
            "OLD"."_FinancialInstrument.FinancialInstrumentID",
            "OLD"."_InvestmentAccount.FinancialContractID",
            "OLD"."_InvestmentAccount.IDSystem",
            "OLD"."BusinessValidFrom",
            "OLD"."BusinessValidTo"
        from :row as "IN"
        inner join "sap.fsdm::AmortizedCost" as "OLD"
        on
           ( case when "IN"."ACCalculationMethod" is null then '' else "IN"."ACCalculationMethod" end ) = "OLD"."ACCalculationMethod" and
           ( case when "IN"."_AccountingSystem.AccountingSystemID" is null then '' else "IN"."_AccountingSystem.AccountingSystemID" end ) = "OLD"."_AccountingSystem.AccountingSystemID" and
           ( case when "IN"."_FinancialContract.FinancialContractID" is null then '' else "IN"."_FinancialContract.FinancialContractID" end ) = "OLD"."_FinancialContract.FinancialContractID" and
           ( case when "IN"."_FinancialContract.IDSystem" is null then '' else "IN"."_FinancialContract.IDSystem" end ) = "OLD"."_FinancialContract.IDSystem" and
           ( case when "IN"."_FinancialInstrument.FinancialInstrumentID" is null then '' else "IN"."_FinancialInstrument.FinancialInstrumentID" end ) = "OLD"."_FinancialInstrument.FinancialInstrumentID" and
           ( case when "IN"."_InvestmentAccount.FinancialContractID" is null then '' else "IN"."_InvestmentAccount.FinancialContractID" end ) = "OLD"."_InvestmentAccount.FinancialContractID" and
           ( case when "IN"."_InvestmentAccount.IDSystem" is null then '' else "IN"."_InvestmentAccount.IDSystem" end ) = "OLD"."_InvestmentAccount.IDSystem" 
        where
           ( "IN"."BusinessValidFrom" < "OLD"."BusinessValidTo" and "IN"."BusinessValidTo" > "OLD"."BusinessValidFrom" ) or
           ( "IN"."BusinessValidFrom" = "OLD"."BusinessValidFrom" and "IN"."BusinessValidTo" = "OLD"."BusinessValidTo" ));

    --Insert ALL the input data 
    insert into "sap.fsdm::AmortizedCost" (
        "ACCalculationMethod",
        "_AccountingSystem.AccountingSystemID",
        "_FinancialContract.FinancialContractID",
        "_FinancialContract.IDSystem",
        "_FinancialInstrument.FinancialInstrumentID",
        "_InvestmentAccount.FinancialContractID",
        "_InvestmentAccount.IDSystem",
        "BusinessValidFrom",
        "BusinessValidTo",
        "AC1PaymentCurrency",
        "AC1PositionCurrency",
        "AC1TimeInPaymentCurrency",
        "AC1TimeInPositionCurrency",
        "ACCPaymentCurrency",
        "ACCPositionCurrency",
        "ACCrossEffectInPaymentCurrency",
        "ACCrossEffectInPositionCurrency",
        "ACInPaymentCurrency",
        "ACInPositionCurrency",
        "ACPaymentCurrency",
        "ACPositionCurrency",
        "EffectiveInterestRate",
        "SourceSystemID",
        "ChangeTimestampInSourceSystem",
        "ChangingUserInSourceSystem",
        "ChangingProcessType",
        "ChangingProcessID"
)    (
        select
            ( case when "ACCalculationMethod" is null then '' else "ACCalculationMethod" end ) as "ACCalculationMethod",
            ( case when "_AccountingSystem.AccountingSystemID" is null then '' else "_AccountingSystem.AccountingSystemID" end ) as "_AccountingSystem.AccountingSystemID",
            ( case when "_FinancialContract.FinancialContractID" is null then '' else "_FinancialContract.FinancialContractID" end ) as "_FinancialContract.FinancialContractID",
            ( case when "_FinancialContract.IDSystem" is null then '' else "_FinancialContract.IDSystem" end ) as "_FinancialContract.IDSystem",
            ( case when "_FinancialInstrument.FinancialInstrumentID" is null then '' else "_FinancialInstrument.FinancialInstrumentID" end ) as "_FinancialInstrument.FinancialInstrumentID",
            ( case when "_InvestmentAccount.FinancialContractID" is null then '' else "_InvestmentAccount.FinancialContractID" end ) as "_InvestmentAccount.FinancialContractID",
            ( case when "_InvestmentAccount.IDSystem" is null then '' else "_InvestmentAccount.IDSystem" end ) as "_InvestmentAccount.IDSystem",
            "BusinessValidFrom"  ,
            "BusinessValidTo"  ,
            "AC1PaymentCurrency"  ,
            "AC1PositionCurrency"  ,
            "AC1TimeInPaymentCurrency"  ,
            "AC1TimeInPositionCurrency"  ,
            "ACCPaymentCurrency"  ,
            "ACCPositionCurrency"  ,
            "ACCrossEffectInPaymentCurrency"  ,
            "ACCrossEffectInPositionCurrency"  ,
            "ACInPaymentCurrency"  ,
            "ACInPositionCurrency"  ,
            "ACPaymentCurrency"  ,
            "ACPositionCurrency"  ,
            "EffectiveInterestRate"  ,
            "SourceSystemID"  ,
            "ChangeTimestampInSourceSystem"  ,
            "ChangingUserInSourceSystem"  ,
            "ChangingProcessType"  ,
            "ChangingProcessID"  
        from :row );

END