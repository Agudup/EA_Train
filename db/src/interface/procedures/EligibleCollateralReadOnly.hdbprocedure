PROCEDURE "sap.fsdm.procedures::EligibleCollateralReadOnly" (IN ROW "sap.fsdm.tabletypes::EligibleCollateralTT", OUT CURR_DEL "sap.fsdm.tabletypes::EligibleCollateralTT_Del", OUT CURR_INS "sap.fsdm.tabletypes::EligibleCollateralTT_Out")
  LANGUAGE SQLSCRIPT
  SQL SECURITY DEFINER
  READS SQL DATA
  AS
BEGIN

    --Check for period overlap
    declare period_overlap condition for sql_error_code 10001;
    declare exit handler for period_overlap
        begin
            declare err_msg clob;
            select TOP 1
                'Business Period Overlap: Key ' ||
                'Scheme=' || TO_VARCHAR("Scheme") || ' ' ||
                '_FinancialInstrument.FinancialInstrumentID=' || TO_VARCHAR("_FinancialInstrument.FinancialInstrumentID") || ' ' ||
                '_InstrumentClass.InstrumentClass=' || TO_VARCHAR("_InstrumentClass.InstrumentClass") || ' ' ||
                '_InstrumentClass.InstrumentClassificationSystem=' || TO_VARCHAR("_InstrumentClass.InstrumentClassificationSystem") || ' ' ||
                '_MasterAgreement.FinancialContractID=' || TO_VARCHAR("_MasterAgreement.FinancialContractID") || ' ' ||
                '_MasterAgreement.IDSystem=' || TO_VARCHAR("_MasterAgreement.IDSystem") || ' ' ||
                '_Organization.BusinessPartnerID=' || TO_VARCHAR("_Organization.BusinessPartnerID") || ' ' ||
                '_ProductCatalogItem.ProductCatalogItem=' || TO_VARCHAR("_ProductCatalogItem.ProductCatalogItem") || ' ' ||
                '_ProductCatalogItem._ProductCatalog.CatalogID=' || TO_VARCHAR("_ProductCatalogItem._ProductCatalog.CatalogID") || ' ' ||
                ':Business Period Overlap Error'
            into err_msg
            from
            (
                select
                    "IN"."BusinessValidFrom" as "X",
                    "IN"."BusinessValidTo" as "Y",
                    lag ( "IN"."BusinessValidFrom", 1)
                    over ( partition by
                        "IN"."Scheme",
                        "IN"."_FinancialInstrument.FinancialInstrumentID",
                        "IN"."_InstrumentClass.InstrumentClass",
                        "IN"."_InstrumentClass.InstrumentClassificationSystem",
                        "IN"."_MasterAgreement.FinancialContractID",
                        "IN"."_MasterAgreement.IDSystem",
                        "IN"."_Organization.BusinessPartnerID",
                        "IN"."_ProductCatalogItem.ProductCatalogItem",
                        "IN"."_ProductCatalogItem._ProductCatalog.CatalogID"
                    order by "IN"."BusinessValidFrom") as "NX_",
                    lag("IN"."BusinessValidTo", 1)
                    over ( partition by
                        "IN"."Scheme",
                        "IN"."_FinancialInstrument.FinancialInstrumentID",
                        "IN"."_InstrumentClass.InstrumentClass",
                        "IN"."_InstrumentClass.InstrumentClassificationSystem",
                        "IN"."_MasterAgreement.FinancialContractID",
                        "IN"."_MasterAgreement.IDSystem",
                        "IN"."_Organization.BusinessPartnerID",
                        "IN"."_ProductCatalogItem.ProductCatalogItem",
                        "IN"."_ProductCatalogItem._ProductCatalog.CatalogID"
                    order by "IN"."BusinessValidFrom") as "NY_",
                        "Scheme",
                        "_FinancialInstrument.FinancialInstrumentID",
                        "_InstrumentClass.InstrumentClass",
                        "_InstrumentClass.InstrumentClassificationSystem",
                        "_MasterAgreement.FinancialContractID",
                        "_MasterAgreement.IDSystem",
                        "_Organization.BusinessPartnerID",
                        "_ProductCatalogItem.ProductCatalogItem",
                        "_ProductCatalogItem._ProductCatalog.CatalogID"
                from :row as "IN"
            )
            where ("X" >= "NX_" and "X" < "NY_") or ("Y" > "NX_" and "Y" <= "NY_");
            resignal set message_text = :err_msg;
        end;

    var_overlap = select *
                    from
                    (
                        select
                            "IN"."BusinessValidFrom" as "X",
                            "IN"."BusinessValidTo" as "Y",
                            lag ( "IN"."BusinessValidFrom", 1)
                            over ( partition by
                                    "IN"."Scheme",
                                    "IN"."_FinancialInstrument.FinancialInstrumentID",
                                    "IN"."_InstrumentClass.InstrumentClass",
                                    "IN"."_InstrumentClass.InstrumentClassificationSystem",
                                    "IN"."_MasterAgreement.FinancialContractID",
                                    "IN"."_MasterAgreement.IDSystem",
                                    "IN"."_Organization.BusinessPartnerID",
                                    "IN"."_ProductCatalogItem.ProductCatalogItem",
                                    "IN"."_ProductCatalogItem._ProductCatalog.CatalogID"
                            order by "IN"."BusinessValidFrom") as "NX_",
                            lag ( "IN"."BusinessValidTo", 1)
                            over ( partition by
                                    "IN"."Scheme",
                                    "IN"."_FinancialInstrument.FinancialInstrumentID",
                                    "IN"."_InstrumentClass.InstrumentClass",
                                    "IN"."_InstrumentClass.InstrumentClassificationSystem",
                                    "IN"."_MasterAgreement.FinancialContractID",
                                    "IN"."_MasterAgreement.IDSystem",
                                    "IN"."_Organization.BusinessPartnerID",
                                    "IN"."_ProductCatalogItem.ProductCatalogItem",
                                    "IN"."_ProductCatalogItem._ProductCatalog.CatalogID"
                            order by "IN"."BusinessValidFrom") as "NY_"
                from :row as "IN"
                )
                where ("X" >= "NX_" and "X" < "NY_") or ("Y" > "NX_" and "Y" <= "NY_");

    if not is_empty(:var_overlap) then
      signal period_overlap;
    end if;

    :var_overlap.delete();


     CURR_DEL = select 
        "Scheme",
        "_FinancialInstrument.FinancialInstrumentID",
        "_InstrumentClass.InstrumentClass",
        "_InstrumentClass.InstrumentClassificationSystem",
        "_MasterAgreement.FinancialContractID",
        "_MasterAgreement.IDSystem",
        "_Organization.BusinessPartnerID",
        "_ProductCatalogItem.ProductCatalogItem",
        "_ProductCatalogItem._ProductCatalog.CatalogID",
        "BusinessValidFrom",
        "BusinessValidTo"
        from "sap.fsdm::EligibleCollateral" WHERE
        (            "Scheme" ,
            "_FinancialInstrument.FinancialInstrumentID" ,
            "_InstrumentClass.InstrumentClass" ,
            "_InstrumentClass.InstrumentClassificationSystem" ,
            "_MasterAgreement.FinancialContractID" ,
            "_MasterAgreement.IDSystem" ,
            "_Organization.BusinessPartnerID" ,
            "_ProductCatalogItem.ProductCatalogItem" ,
            "_ProductCatalogItem._ProductCatalog.CatalogID" ,
            "BusinessValidFrom" ,
            "BusinessValidTo" 

        )        
in ( select
            "OLD"."Scheme",
            "OLD"."_FinancialInstrument.FinancialInstrumentID",
            "OLD"."_InstrumentClass.InstrumentClass",
            "OLD"."_InstrumentClass.InstrumentClassificationSystem",
            "OLD"."_MasterAgreement.FinancialContractID",
            "OLD"."_MasterAgreement.IDSystem",
            "OLD"."_Organization.BusinessPartnerID",
            "OLD"."_ProductCatalogItem.ProductCatalogItem",
            "OLD"."_ProductCatalogItem._ProductCatalog.CatalogID",
            "OLD"."BusinessValidFrom",
            "OLD"."BusinessValidTo"
            from :row as "IN"
            inner join "sap.fsdm::EligibleCollateral" as "OLD"
            on
               ( case when "IN"."Scheme" is null then '' else "IN"."Scheme" end ) = "OLD"."Scheme" and
               ( case when "IN"."_FinancialInstrument.FinancialInstrumentID" is null then '' else "IN"."_FinancialInstrument.FinancialInstrumentID" end ) = "OLD"."_FinancialInstrument.FinancialInstrumentID" and
               ( case when "IN"."_InstrumentClass.InstrumentClass" is null then '' else "IN"."_InstrumentClass.InstrumentClass" end ) = "OLD"."_InstrumentClass.InstrumentClass" and
               ( case when "IN"."_InstrumentClass.InstrumentClassificationSystem" is null then '' else "IN"."_InstrumentClass.InstrumentClassificationSystem" end ) = "OLD"."_InstrumentClass.InstrumentClassificationSystem" and
               ( case when "IN"."_MasterAgreement.FinancialContractID" is null then '' else "IN"."_MasterAgreement.FinancialContractID" end ) = "OLD"."_MasterAgreement.FinancialContractID" and
               ( case when "IN"."_MasterAgreement.IDSystem" is null then '' else "IN"."_MasterAgreement.IDSystem" end ) = "OLD"."_MasterAgreement.IDSystem" and
               ( case when "IN"."_Organization.BusinessPartnerID" is null then '' else "IN"."_Organization.BusinessPartnerID" end ) = "OLD"."_Organization.BusinessPartnerID" and
               ( case when "IN"."_ProductCatalogItem.ProductCatalogItem" is null then '' else "IN"."_ProductCatalogItem.ProductCatalogItem" end ) = "OLD"."_ProductCatalogItem.ProductCatalogItem" and
               ( case when "IN"."_ProductCatalogItem._ProductCatalog.CatalogID" is null then '' else "IN"."_ProductCatalogItem._ProductCatalog.CatalogID" end ) = "OLD"."_ProductCatalogItem._ProductCatalog.CatalogID" 
            where
               ( "IN"."BusinessValidFrom" < "OLD"."BusinessValidTo" and "IN"."BusinessValidTo" > "OLD"."BusinessValidFrom" ) or
               ( "IN"."BusinessValidFrom" = "OLD"."BusinessValidFrom" and "IN"."BusinessValidTo" = "OLD"."BusinessValidTo" ));


--Insert ALL the input data 

    CURR_INS = select 
        "Scheme",
        "_FinancialInstrument.FinancialInstrumentID",
        "_InstrumentClass.InstrumentClass",
        "_InstrumentClass.InstrumentClassificationSystem",
        "_MasterAgreement.FinancialContractID",
        "_MasterAgreement.IDSystem",
        "_Organization.BusinessPartnerID",
        "_ProductCatalogItem.ProductCatalogItem",
        "_ProductCatalogItem._ProductCatalog.CatalogID",
        "BusinessValidFrom",
        "BusinessValidTo",
        "EligibilityStatus",
        "Haircut",
        "SourceSystemID",
        "ChangeTimestampInSourceSystem",
        "ChangingUserInSourceSystem",
        "ChangingProcessType",
        "ChangingProcessID"
        from (
            (
                select
                    ( case when "Scheme" is null then '' else "Scheme" end ) as "Scheme",
                    ( case when "_FinancialInstrument.FinancialInstrumentID" is null then '' else "_FinancialInstrument.FinancialInstrumentID" end ) as "_FinancialInstrument.FinancialInstrumentID",
                    ( case when "_InstrumentClass.InstrumentClass" is null then '' else "_InstrumentClass.InstrumentClass" end ) as "_InstrumentClass.InstrumentClass",
                    ( case when "_InstrumentClass.InstrumentClassificationSystem" is null then '' else "_InstrumentClass.InstrumentClassificationSystem" end ) as "_InstrumentClass.InstrumentClassificationSystem",
                    ( case when "_MasterAgreement.FinancialContractID" is null then '' else "_MasterAgreement.FinancialContractID" end ) as "_MasterAgreement.FinancialContractID",
                    ( case when "_MasterAgreement.IDSystem" is null then '' else "_MasterAgreement.IDSystem" end ) as "_MasterAgreement.IDSystem",
                    ( case when "_Organization.BusinessPartnerID" is null then '' else "_Organization.BusinessPartnerID" end ) as "_Organization.BusinessPartnerID",
                    ( case when "_ProductCatalogItem.ProductCatalogItem" is null then '' else "_ProductCatalogItem.ProductCatalogItem" end ) as "_ProductCatalogItem.ProductCatalogItem",
                    ( case when "_ProductCatalogItem._ProductCatalog.CatalogID" is null then '' else "_ProductCatalogItem._ProductCatalog.CatalogID" end ) as "_ProductCatalogItem._ProductCatalog.CatalogID",
                    "BusinessValidFrom"  ,
                    "BusinessValidTo"  ,
                    "EligibilityStatus"  ,
                    "Haircut"  ,
                    "SourceSystemID"  ,
                    "ChangeTimestampInSourceSystem"  ,
                    "ChangingUserInSourceSystem"  ,
                    "ChangingProcessType"  ,
                    "ChangingProcessID"  
                from :row             )
            UNION ALL
            (
                select
                    "OLD_Scheme" as "Scheme" ,
                    "OLD__FinancialInstrument.FinancialInstrumentID" as "_FinancialInstrument.FinancialInstrumentID" ,
                    "OLD__InstrumentClass.InstrumentClass" as "_InstrumentClass.InstrumentClass" ,
                    "OLD__InstrumentClass.InstrumentClassificationSystem" as "_InstrumentClass.InstrumentClassificationSystem" ,
                    "OLD__MasterAgreement.FinancialContractID" as "_MasterAgreement.FinancialContractID" ,
                    "OLD__MasterAgreement.IDSystem" as "_MasterAgreement.IDSystem" ,
                    "OLD__Organization.BusinessPartnerID" as "_Organization.BusinessPartnerID" ,
                    "OLD__ProductCatalogItem.ProductCatalogItem" as "_ProductCatalogItem.ProductCatalogItem" ,
                    "OLD__ProductCatalogItem._ProductCatalog.CatalogID" as "_ProductCatalogItem._ProductCatalog.CatalogID" ,
                    "NX_" as "BusinessValidFrom" ,
                    "BusinessValidFrom" as "BusinessValidTo" ,
                    "OLD_EligibilityStatus" as "EligibilityStatus" ,
                    "OLD_Haircut" as "Haircut" ,
                    "OLD_SourceSystemID" as "SourceSystemID" ,
                    "OLD_ChangeTimestampInSourceSystem" as "ChangeTimestampInSourceSystem" ,
                    "OLD_ChangingUserInSourceSystem" as "ChangingUserInSourceSystem" ,
                    "OLD_ChangingProcessType" as "ChangingProcessType" ,
                    "OLD_ChangingProcessID" as "ChangingProcessID" 
        from
        (
            select
                lag("IN"."BusinessValidTo", 1, "OLD"."BusinessValidFrom")
                over ( partition by
                        "IN"."Scheme",
                        "IN"."_FinancialInstrument.FinancialInstrumentID",
                        "IN"."_InstrumentClass.InstrumentClass",
                        "IN"."_InstrumentClass.InstrumentClassificationSystem",
                        "IN"."_MasterAgreement.FinancialContractID",
                        "IN"."_MasterAgreement.IDSystem",
                        "IN"."_Organization.BusinessPartnerID",
                        "IN"."_ProductCatalogItem.ProductCatalogItem",
                        "IN"."_ProductCatalogItem._ProductCatalog.CatalogID",
                        "OLD"."BusinessValidFrom"
                       order by "IN"."BusinessValidFrom") as "NX_",
                "IN"."BusinessValidFrom",
                                "OLD"."Scheme" as "OLD_Scheme",
                                "OLD"."_FinancialInstrument.FinancialInstrumentID" as "OLD__FinancialInstrument.FinancialInstrumentID",
                                "OLD"."_InstrumentClass.InstrumentClass" as "OLD__InstrumentClass.InstrumentClass",
                                "OLD"."_InstrumentClass.InstrumentClassificationSystem" as "OLD__InstrumentClass.InstrumentClassificationSystem",
                                "OLD"."_MasterAgreement.FinancialContractID" as "OLD__MasterAgreement.FinancialContractID",
                                "OLD"."_MasterAgreement.IDSystem" as "OLD__MasterAgreement.IDSystem",
                                "OLD"."_Organization.BusinessPartnerID" as "OLD__Organization.BusinessPartnerID",
                                "OLD"."_ProductCatalogItem.ProductCatalogItem" as "OLD__ProductCatalogItem.ProductCatalogItem",
                                "OLD"."_ProductCatalogItem._ProductCatalog.CatalogID" as "OLD__ProductCatalogItem._ProductCatalog.CatalogID",
                                "OLD"."BusinessValidFrom" as "OLD_BusinessValidFrom",
                                "OLD"."BusinessValidTo" as "OLD_BusinessValidTo",
                "OLD"."SystemValidFrom" as "OLD_SystemValidFrom",
                "OLD"."SystemValidTo" as "OLD_SystemValidTo",
                                "OLD"."EligibilityStatus" as "OLD_EligibilityStatus",
                                "OLD"."Haircut" as "OLD_Haircut",
                                "OLD"."SourceSystemID" as "OLD_SourceSystemID",
                                "OLD"."ChangeTimestampInSourceSystem" as "OLD_ChangeTimestampInSourceSystem",
                                "OLD"."ChangingUserInSourceSystem" as "OLD_ChangingUserInSourceSystem",
                                "OLD"."ChangingProcessType" as "OLD_ChangingProcessType",
                                "OLD"."ChangingProcessID" as "OLD_ChangingProcessID"
            from :row as "IN"
            inner join "sap.fsdm::EligibleCollateral" as "OLD"
            on
                ( case when "IN"."Scheme" is null then '' else "IN"."Scheme" end ) = "OLD"."Scheme" and
                ( case when "IN"."_FinancialInstrument.FinancialInstrumentID" is null then '' else "IN"."_FinancialInstrument.FinancialInstrumentID" end ) = "OLD"."_FinancialInstrument.FinancialInstrumentID" and
                ( case when "IN"."_InstrumentClass.InstrumentClass" is null then '' else "IN"."_InstrumentClass.InstrumentClass" end ) = "OLD"."_InstrumentClass.InstrumentClass" and
                ( case when "IN"."_InstrumentClass.InstrumentClassificationSystem" is null then '' else "IN"."_InstrumentClass.InstrumentClassificationSystem" end ) = "OLD"."_InstrumentClass.InstrumentClassificationSystem" and
                ( case when "IN"."_MasterAgreement.FinancialContractID" is null then '' else "IN"."_MasterAgreement.FinancialContractID" end ) = "OLD"."_MasterAgreement.FinancialContractID" and
                ( case when "IN"."_MasterAgreement.IDSystem" is null then '' else "IN"."_MasterAgreement.IDSystem" end ) = "OLD"."_MasterAgreement.IDSystem" and
                ( case when "IN"."_Organization.BusinessPartnerID" is null then '' else "IN"."_Organization.BusinessPartnerID" end ) = "OLD"."_Organization.BusinessPartnerID" and
                ( case when "IN"."_ProductCatalogItem.ProductCatalogItem" is null then '' else "IN"."_ProductCatalogItem.ProductCatalogItem" end ) = "OLD"."_ProductCatalogItem.ProductCatalogItem" and
                ( case when "IN"."_ProductCatalogItem._ProductCatalog.CatalogID" is null then '' else "IN"."_ProductCatalogItem._ProductCatalog.CatalogID" end ) = "OLD"."_ProductCatalogItem._ProductCatalog.CatalogID" 
            where
                         ( "IN"."BusinessValidFrom" < "OLD"."BusinessValidTo" and "IN"."BusinessValidTo" > "OLD"."BusinessValidFrom" ) or
                         ( "IN"."BusinessValidFrom" = "OLD"."BusinessValidFrom" and "IN"."BusinessValidTo" = "OLD"."BusinessValidTo" ))
        where "BusinessValidFrom" > "NX_" )
            UNION ALL
        (
            select
            "OLD_Scheme" as "Scheme",
            "OLD__FinancialInstrument.FinancialInstrumentID" as "_FinancialInstrument.FinancialInstrumentID",
            "OLD__InstrumentClass.InstrumentClass" as "_InstrumentClass.InstrumentClass",
            "OLD__InstrumentClass.InstrumentClassificationSystem" as "_InstrumentClass.InstrumentClassificationSystem",
            "OLD__MasterAgreement.FinancialContractID" as "_MasterAgreement.FinancialContractID",
            "OLD__MasterAgreement.IDSystem" as "_MasterAgreement.IDSystem",
            "OLD__Organization.BusinessPartnerID" as "_Organization.BusinessPartnerID",
            "OLD__ProductCatalogItem.ProductCatalogItem" as "_ProductCatalogItem.ProductCatalogItem",
            "OLD__ProductCatalogItem._ProductCatalog.CatalogID" as "_ProductCatalogItem._ProductCatalog.CatalogID",
            "BusinessValidTo" as "BusinessValidFrom",
            "OLD_BusinessValidTo" as "BusinessValidTo",
            "OLD_EligibilityStatus" as "EligibilityStatus",
            "OLD_Haircut" as "Haircut",
            "OLD_SourceSystemID" as "SourceSystemID",
            "OLD_ChangeTimestampInSourceSystem" as "ChangeTimestampInSourceSystem",
            "OLD_ChangingUserInSourceSystem" as "ChangingUserInSourceSystem",
            "OLD_ChangingProcessType" as "ChangingProcessType",
            "OLD_ChangingProcessID" as "ChangingProcessID"
            from
            (
                select
                lead("IN"."BusinessValidFrom", 1, "OLD"."BusinessValidTo")
                over ( partition by
                        "IN"."Scheme",
                        "IN"."_FinancialInstrument.FinancialInstrumentID",
                        "IN"."_InstrumentClass.InstrumentClass",
                        "IN"."_InstrumentClass.InstrumentClassificationSystem",
                        "IN"."_MasterAgreement.FinancialContractID",
                        "IN"."_MasterAgreement.IDSystem",
                        "IN"."_Organization.BusinessPartnerID",
                        "IN"."_ProductCatalogItem.ProductCatalogItem",
                        "IN"."_ProductCatalogItem._ProductCatalog.CatalogID",
                        "OLD"."BusinessValidFrom"
                order by "IN"."BusinessValidFrom") AS "NY_",
                "IN"."BusinessValidTo",
                        "OLD"."Scheme" as "OLD_Scheme",
                        "OLD"."_FinancialInstrument.FinancialInstrumentID" as "OLD__FinancialInstrument.FinancialInstrumentID",
                        "OLD"."_InstrumentClass.InstrumentClass" as "OLD__InstrumentClass.InstrumentClass",
                        "OLD"."_InstrumentClass.InstrumentClassificationSystem" as "OLD__InstrumentClass.InstrumentClassificationSystem",
                        "OLD"."_MasterAgreement.FinancialContractID" as "OLD__MasterAgreement.FinancialContractID",
                        "OLD"."_MasterAgreement.IDSystem" as "OLD__MasterAgreement.IDSystem",
                        "OLD"."_Organization.BusinessPartnerID" as "OLD__Organization.BusinessPartnerID",
                        "OLD"."_ProductCatalogItem.ProductCatalogItem" as "OLD__ProductCatalogItem.ProductCatalogItem",
                        "OLD"."_ProductCatalogItem._ProductCatalog.CatalogID" as "OLD__ProductCatalogItem._ProductCatalog.CatalogID",
                        "OLD"."BusinessValidFrom" as "OLD_BusinessValidFrom",
                        "OLD"."BusinessValidTo" as "OLD_BusinessValidTo",
            "OLD"."SystemValidFrom" as "OLD_SystemValidFrom",
            "OLD"."SystemValidTo" as "OLD_SystemValidTo",
                        "OLD"."EligibilityStatus" as "OLD_EligibilityStatus",
                        "OLD"."Haircut" as "OLD_Haircut",
                        "OLD"."SourceSystemID" as "OLD_SourceSystemID",
                        "OLD"."ChangeTimestampInSourceSystem" as "OLD_ChangeTimestampInSourceSystem",
                        "OLD"."ChangingUserInSourceSystem" as "OLD_ChangingUserInSourceSystem",
                        "OLD"."ChangingProcessType" as "OLD_ChangingProcessType",
                        "OLD"."ChangingProcessID" as "OLD_ChangingProcessID"
            from :row as "IN"
            inner join "sap.fsdm::EligibleCollateral" as "OLD"
            on
                ( case when "IN"."Scheme" is null then '' else "IN"."Scheme" end ) = "OLD"."Scheme" and
                ( case when "IN"."_FinancialInstrument.FinancialInstrumentID" is null then '' else "IN"."_FinancialInstrument.FinancialInstrumentID" end ) = "OLD"."_FinancialInstrument.FinancialInstrumentID" and
                ( case when "IN"."_InstrumentClass.InstrumentClass" is null then '' else "IN"."_InstrumentClass.InstrumentClass" end ) = "OLD"."_InstrumentClass.InstrumentClass" and
                ( case when "IN"."_InstrumentClass.InstrumentClassificationSystem" is null then '' else "IN"."_InstrumentClass.InstrumentClassificationSystem" end ) = "OLD"."_InstrumentClass.InstrumentClassificationSystem" and
                ( case when "IN"."_MasterAgreement.FinancialContractID" is null then '' else "IN"."_MasterAgreement.FinancialContractID" end ) = "OLD"."_MasterAgreement.FinancialContractID" and
                ( case when "IN"."_MasterAgreement.IDSystem" is null then '' else "IN"."_MasterAgreement.IDSystem" end ) = "OLD"."_MasterAgreement.IDSystem" and
                ( case when "IN"."_Organization.BusinessPartnerID" is null then '' else "IN"."_Organization.BusinessPartnerID" end ) = "OLD"."_Organization.BusinessPartnerID" and
                ( case when "IN"."_ProductCatalogItem.ProductCatalogItem" is null then '' else "IN"."_ProductCatalogItem.ProductCatalogItem" end ) = "OLD"."_ProductCatalogItem.ProductCatalogItem" and
                ( case when "IN"."_ProductCatalogItem._ProductCatalog.CatalogID" is null then '' else "IN"."_ProductCatalogItem._ProductCatalog.CatalogID" end ) = "OLD"."_ProductCatalogItem._ProductCatalog.CatalogID" 
            where
                         ( "IN"."BusinessValidFrom" < "OLD"."BusinessValidTo" and "IN"."BusinessValidTo" > "OLD"."BusinessValidFrom" ) or
                         ( "IN"."BusinessValidFrom" = "OLD"."BusinessValidFrom" and "IN"."BusinessValidTo" = "OLD"."BusinessValidTo" ))
        where "NY_" = "OLD_BusinessValidTo" and "OLD_BusinessValidTo" > "BusinessValidTo"));



END
